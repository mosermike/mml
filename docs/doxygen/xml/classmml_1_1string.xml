<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classmml_1_1string" kind="class" language="C++" prot="public">
    <compoundname>mml::string</compoundname>
    <includes refid="standards_8hpp" local="no">standards.hpp</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classmml_1_1string_1a3da80d33f5aa244511801c6eba736c91" prot="private" static="no">
        <type>std::vector&lt; char &gt;::iterator</type>
        <definition>using mml::string::iterator =  std::vector&lt;char&gt;::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="44" column="1" bodyfile="include/mml/standards.hpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classmml_1_1string_1a35e3e6685c5364e0ddfd68f1a7d60bdf" prot="private" static="no">
        <type>std::vector&lt; char &gt;::const_iterator</type>
        <definition>using mml::string::const_iterator =  std::vector&lt;char&gt;::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="45" column="5" bodyfile="include/mml/standards.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmml_1_1string_1a8835de31377f2c4441fb88a724b3d269" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string mml::string::value</definition>
        <argsstring></argsstring>
        <name>value</name>
        <initializer>= &quot;&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="31" column="13" bodyfile="include/mml/standards.hpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmml_1_1string_1a85dc98333607d441a7ef28dc0bd0281a" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string mml::string::temp</definition>
        <argsstring></argsstring>
        <name>temp</name>
        <initializer>= &quot;&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="32" column="13" bodyfile="include/mml/standards.hpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classmml_1_1string_1ad0d748a84b091ce5a634140f716dbeec" prot="private" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename templ</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmml_1_1string" kindref="compound">mml::string</ref></type>
        <definition>mml::string mml::string::to_mml</definition>
        <argsstring>(templ val) const noexcept</argsstring>
        <name>to_mml</name>
        <param>
          <type>templ</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="35" column="25" bodyfile="include/mml/standards.hpp" bodystart="35" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1acfcc45f75a69e87f0699738b8443412c" prot="private" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mml::string::_exist</definition>
        <argsstring>(std::string name) const noexcept</argsstring>
        <name>_exist</name>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Check if a string exists. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>String to be checked </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="249" column="6" bodyfile="src/string.cpp" bodystart="341" bodyend="343"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmml_1_1string_1a027b118294677870eccf9ff59d4b1e96" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename templ</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>mml::string::string</definition>
        <argsstring>(templ str) noexcept</argsstring>
        <name>string</name>
        <param>
          <type>templ</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Constructor with a value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be converted to a string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="51" column="13" bodyfile="include/mml/standards.hpp" bodystart="51" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1aa83d5b5500921e4d782ef18e16ac83dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mml::string::string</definition>
        <argsstring>(size_t n, char c)</argsstring>
        <name>string</name>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Constructor creating n times the char c. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>how often the character c should appear </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Character which appears n times </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="63" column="1" bodyfile="include/mml/standards.hpp" bodystart="63" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1a3b3ab50be8db94f7a37bcb98bd32469a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mml::string::string</definition>
        <argsstring>()</argsstring>
        <name>string</name>
        <briefdescription>
<para>Constructor without a value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="68" column="1" bodyfile="include/mml/standards.hpp" bodystart="68" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1a44ceac8e8ff4252b607c882cb2fafb51" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename templ</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmml_1_1string" kindref="compound">mml::string</ref> &amp;</type>
        <definition>mml::string&amp; mml::string::operator=</definition>
        <argsstring>(templ str) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type>templ</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Assign the value of the template type with the &apos;=&apos; sign. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Class instance </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="75" column="25" bodyfile="include/mml/standards.hpp" bodystart="75" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1a2dc8532f18b16a12e3d5230554c1fbb3" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename templ</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool mml::string::operator==</definition>
        <argsstring>(templ Test) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>templ</type>
          <declname>Test</declname>
        </param>
        <briefdescription>
<para>Operator equal. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Test</parametername>
</parameternamelist>
<parameterdescription>
<para>Value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="112" column="17" bodyfile="include/mml/standards.hpp" bodystart="112" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1a24b0963f2fd25358a59d31de781bdee1" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename templ</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool mml::string::operator!=</definition>
        <argsstring>(templ Test) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>templ</type>
          <declname>Test</declname>
        </param>
        <briefdescription>
<para>Operator unequal. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Test</parametername>
</parameternamelist>
<parameterdescription>
<para>Value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="119" column="17" bodyfile="include/mml/standards.hpp" bodystart="119" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1aacf903537609817f57c9351b99c298cc" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename templ</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmml_1_1string" kindref="compound">mml::string</ref></type>
        <definition>mml::string mml::string::operator+</definition>
        <argsstring>(templ Test) const noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>templ</type>
          <declname>Test</declname>
        </param>
        <briefdescription>
<para>Operator add somehting at the end of this instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Test</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be added </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classmml_1_1string" kindref="compound">mml::string</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="127" column="24" bodyfile="include/mml/standards.hpp" bodystart="127" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1a02cafc3fa2871839d9e234651a989c4d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename templ</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmml_1_1string" kindref="compound">mml::string</ref></type>
        <definition>mml::string mml::string::operator+=</definition>
        <argsstring>(templ add) noexcept</argsstring>
        <name>operator+=</name>
        <param>
          <type>templ</type>
          <declname>add</declname>
        </param>
        <briefdescription>
<para>Operator add a char vector to this string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>add</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be added </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classmml_1_1string" kindref="compound">mml::string</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="135" column="24" bodyfile="include/mml/standards.hpp" bodystart="135" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1a754a104abb34fd9842cd5869566bfdb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char &amp;</type>
        <definition>char &amp; mml::string::operator[]</definition>
        <argsstring>(int index)</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Return a specific char from the string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the character to be retured </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>char </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>logic_error</parametername>
</parameternamelist>
<parameterdescription>
<para>: if out of range </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="143" column="6" bodyfile="src/string.cpp" bodystart="27" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1a21139f53285c374c383759f61010f185" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char &amp;</type>
        <definition>const char &amp; mml::string::operator[]</definition>
        <argsstring>(int index) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="144" column="12" bodyfile="src/string.cpp" bodystart="37" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1a65172ea4fe29abb123ac12f905d6c51b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::string &amp;</type>
        <definition>std::string &amp; mml::string::operator()</definition>
        <argsstring>() noexcept</argsstring>
        <name>operator()</name>
        <briefdescription>
<para>Returns the value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Value of the instance as a std::string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="150" column="13" bodyfile="src/string.cpp" bodystart="48" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1a416b20bb48149ff912bea8d85db1979f" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; mml::string::operator()</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator()</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="151" column="19" bodyfile="src/string.cpp" bodystart="52" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1a3e5acb34d8d3dba2b5971970bb345679" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>double</type>
        <definition>double mml::string::atof</definition>
        <argsstring>() const noexcept</argsstring>
        <name>atof</name>
        <briefdescription>
<para>Converts this string into a double. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>double </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="157" column="8" bodyfile="src/string.cpp" bodystart="56" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1aa014e1a0fc78a28d7a99c6a83cd4b486" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int mml::string::atoi</definition>
        <argsstring>() const noexcept</argsstring>
        <name>atoi</name>
        <briefdescription>
<para>Convert this string into an integer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="163" column="5" bodyfile="src/string.cpp" bodystart="60" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1a66057297d6504b42f1c397b15c377359" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::string::iterator</type>
        <definition>std::string::iterator mml::string::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Returns an iterator that points to the beginning of the string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string::iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="169" column="23" bodyfile="include/mml/standards.hpp" bodystart="169" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1ab05ba61105f8c99256c2828593a87528" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::string::const_iterator</type>
        <definition>std::string::const_iterator mml::string::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Returns an iterator that points to the beginning of the string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string::const_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="175" column="32" bodyfile="include/mml/standards.hpp" bodystart="175" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1a17a10d669d0ccefc87e0d756cb23de7a" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * mml::string::c_str</definition>
        <argsstring>() const noexcept</argsstring>
        <name>c_str</name>
        <briefdescription>
<para>Returns the string as a character pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>char* </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="181" column="12" bodyfile="src/string.cpp" bodystart="260" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1a948f7256bc8c59fc12e7a1fcb2d761a1" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mml::string::clear</definition>
        <argsstring>() noexcept</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Clears the string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>None </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="187" column="6" bodyfile="include/mml/standards.hpp" bodystart="187" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1ad445fefff4ea3faf11a24689dc43ba96" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t mml::string::count</definition>
        <argsstring>(mml::string name) const noexcept</argsstring>
        <name>count</name>
        <param>
          <type><ref refid="classmml_1_1string" kindref="compound">mml::string</ref></type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Count how often a string appears. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>String which is counted </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="194" column="10" bodyfile="src/string.cpp" bodystart="290" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1a73cb6c24174f5832d939817432733c45" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mml::string::cout</definition>
        <argsstring>(bool newline=true, std::string text=&quot;&quot;) const noexcept</argsstring>
        <name>cout</name>
        <param>
          <type>bool</type>
          <declname>newline</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>text</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Print out the value of this instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newline</parametername>
</parameternamelist>
<parameterdescription>
<para>Print newline. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional text. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="202" column="6" bodyfile="src/string.cpp" bodystart="301" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1ae4d49ea8a844bbd5cd9bdcafc10167a4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mml::string::del_letter</definition>
        <argsstring>(bool save=false) noexcept</argsstring>
        <name>del_letter</name>
        <param>
          <type>bool</type>
          <declname>save</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Delete letters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>save</parametername>
</parameternamelist>
<parameterdescription>
<para>Save the changed string in this instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="209" column="15" bodyfile="src/string.cpp" bodystart="307" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1a1e44a0c0630173b390e469fe1ea7e2cd" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mml::string::del_number</definition>
        <argsstring>(bool save=false) noexcept</argsstring>
        <name>del_number</name>
        <param>
          <type>bool</type>
          <declname>save</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Delete numbers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>save</parametername>
</parameternamelist>
<parameterdescription>
<para>Save the changed string in this instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="216" column="13" bodyfile="src/string.cpp" bodystart="318" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1a971215481fb9080179fc9c7f22b43e5c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mml::string::del_space</definition>
        <argsstring>(bool save=false) noexcept</argsstring>
        <name>del_space</name>
        <param>
          <type>bool</type>
          <declname>save</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Remove everything after the first space. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>save</parametername>
</parameternamelist>
<parameterdescription>
<para>Save the changed string in this instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="223" column="15" bodyfile="src/string.cpp" bodystart="329" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1aa9ce2d895b544f4e5b2d9f7845030d81" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mml::string::empty</definition>
        <argsstring>() const noexcept</argsstring>
        <name>empty</name>
        <briefdescription>
<para>Checks if the string is empty. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="229" column="8" bodyfile="include/mml/standards.hpp" bodystart="229" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1a80c23eafaa8bd703214a915eadb08892" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::string::iterator</type>
        <definition>std::string::iterator mml::string::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <briefdescription>
<para>Returns an iterator that points to the end of the string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string::iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="235" column="27" bodyfile="include/mml/standards.hpp" bodystart="235" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1a81b4a8f4b92871877fd9fbe01e3e169f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::string::const_iterator</type>
        <definition>std::string::const_iterator mml::string::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <briefdescription>
<para>Returns an iterator that points to the end of the string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string::const_iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="241" column="33" bodyfile="include/mml/standards.hpp" bodystart="241" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1a7b69360e58b51d0a5bf5a0a80ae18016" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool mml::string::exist</definition>
        <argsstring>(const Args &amp;... args) const noexcept</argsstring>
        <name>exist</name>
        <param>
          <type>const Args &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Check if one <emphasis>or</emphasis> another string exists. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameters to be checked </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="257" column="17" bodyfile="include/mml/standards.hpp" bodystart="257" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1a89a49641b8fd8b0d75ec3d3622b2398a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t mml::string::find</definition>
        <argsstring>(char letter, std::size_t old=0) const noexcept</argsstring>
        <name>find</name>
        <param>
          <type>char</type>
          <declname>letter</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>old</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Position of the first appearance of a character after a start position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>letter</parametername>
</parameternamelist>
<parameterdescription>
<para>Value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>old</parametername>
</parameternamelist>
<parameterdescription>
<para>Value from where to search for the char. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Position </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="267" column="13" bodyfile="include/mml/standards.hpp" bodystart="267" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1ae941485426daada6dfa640f297cb7062" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t mml::string::find</definition>
        <argsstring>(mml::string name, std::size_t old=0) const noexcept</argsstring>
        <name>find</name>
        <param>
          <type><ref refid="classmml_1_1string" kindref="compound">mml::string</ref></type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>old</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Position of the first appearance of a string after a start position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>old</parametername>
</parameternamelist>
<parameterdescription>
<para>Value from where to search for the char. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Position </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="274" column="13" bodyfile="include/mml/standards.hpp" bodystart="274" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1ae5ef197e443356af7e277376e4cb84a7" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mml::string::getline</definition>
        <argsstring>(std::ifstream &amp;input) noexcept</argsstring>
        <name>getline</name>
        <param>
          <type>std::ifstream &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Reads a line from an input file stream and assigns it to the instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="281" column="6" bodyfile="src/string.cpp" bodystart="274" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1a83806c5e9d92585f57f9ef2dbaf67e07" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mml::string::getline</definition>
        <argsstring>(std::string input, std::size_t line=0) noexcept</argsstring>
        <name>getline</name>
        <param>
          <type>std::string</type>
          <declname>input</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>line</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Reads a line from a file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>File name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>Line number. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="290" column="13" bodyfile="src/string.cpp" bodystart="279" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1a3be0681c2f790864554bc70e1fade183" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mml::string::getValue</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getValue</name>
        <briefdescription>
<para>Get the value of this instance. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="296" column="13" bodyfile="src/string.cpp" bodystart="238" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1a8d274341148ce54f85f1a50ea5b0e5f9" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t mml::string::hash</definition>
        <argsstring>() const noexcept</argsstring>
        <name>hash</name>
        <briefdescription>
<para>Creates a hash value of this instance. This hash value can then be used for example in an switch ... case with strings by using hash values. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint32_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="302" column="10" bodyfile="src/string.cpp" bodystart="269" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1ada3e20559af145a083b0efe8f3dbe60a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mml::string::log</definition>
        <argsstring>(std::string logpath) const</argsstring>
        <name>log</name>
        <param>
          <type>std::string</type>
          <declname>logpath</declname>
        </param>
        <briefdescription>
<para>Writes the value of this instance into a log file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>logpath</parametername>
</parameternamelist>
<parameterdescription>
<para>Path to the logfile </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>: if permission to create log file is denied </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="310" column="6" bodyfile="src/string.cpp" bodystart="65" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1a4860b64f242e6602b3be8b8ee2e71b02" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mml::string::lower</definition>
        <argsstring>() noexcept</argsstring>
        <name>lower</name>
        <briefdescription>
<para>Transforms all letters into low case letters. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="316" column="13" bodyfile="src/string.cpp" bodystart="89" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1a91f2537027d7dc0bf3fa612885f07e83" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; mml::string::ls</definition>
        <argsstring>(std::string name_include, std::string name_exclude, std::vector&lt; std::string &gt; &amp;directories, bool recursive=false, bool all=false) const</argsstring>
        <name>ls</name>
        <param>
          <type>std::string</type>
          <declname>name_include</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name_exclude</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>directories</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>recursive</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>all</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>List all files and directories in a path. Directories end with &apos;/&apos; in the entry. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name_include</parametername>
</parameternamelist>
<parameterdescription>
<para>Only list files or directories which include this string in the name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name_exclude</parametername>
</parameternamelist>
<parameterdescription>
<para>Exclude files or directories with this string in the name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>directories</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a vector where the directories are added </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recursive</parametername>
</parameternamelist>
<parameterdescription>
<para>Check directory recursively </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>all</parametername>
</parameternamelist>
<parameterdescription>
<para>Also list hidden files </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;std::string&gt; </para>
</simplesect>
<simplesect kind="note"><para>If name_include or name_exclude is detected for a directory, all the elements in this directory are either included or excluded, respectively. </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>: if the string does not exist </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="329" column="13" bodyfile="src/string.cpp" bodystart="96" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1ade5bf437b0ffd5a3bd4ecc1480bb9088" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; mml::string::ls</definition>
        <argsstring>(std::string name_include=&quot;&quot;, std::string name_exclude=&quot;&quot;, bool recursive=false, bool all=false) const</argsstring>
        <name>ls</name>
        <param>
          <type>std::string</type>
          <declname>name_include</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>name_exclude</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>recursive</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>all</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>List all files and directories in a path. Directories end with &apos;/&apos; in the entry. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name_include</parametername>
</parameternamelist>
<parameterdescription>
<para>Only list files or directories which include this string in the name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name_exclude</parametername>
</parameternamelist>
<parameterdescription>
<para>Exclude files or directories with this string in the name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recursive</parametername>
</parameternamelist>
<parameterdescription>
<para>Check directory recursively </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>all</parametername>
</parameternamelist>
<parameterdescription>
<para>Also list hidden files </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;std::string&gt; </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>: if the string does not exist </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>If name_include or name_exclude is detected for a directory, all the elements in this directory are either included or excluded, respectively. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="341" column="13" bodyfile="src/string.cpp" bodystart="173" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1a2ad1a6e9455c045c56dcf148e4540e82" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mml::string::mkdir_p</definition>
        <argsstring>() noexcept</argsstring>
        <name>mkdir_p</name>
        <briefdescription>
<para>Create directory with creating parent directories. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="347" column="6" bodyfile="src/string.cpp" bodystart="200" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1a9fa1fba30f50aecf44c069ba9e89bdab" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mml::string::remove</definition>
        <argsstring>() const noexcept</argsstring>
        <name>remove</name>
        <briefdescription>
<para>Remove the file with the value of the instance. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="353" column="6" bodyfile="src/string.cpp" bodystart="232" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1a9939471a850c71c8e18d7e0a5413edb3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmml_1_1string" kindref="compound">mml::string</ref></type>
        <definition>mml::string mml::string::replace</definition>
        <argsstring>(T1 &amp;&amp;str_old, T2 &amp;&amp;str_new, std::size_t pos=0)</argsstring>
        <name>replace</name>
        <param>
          <type>T1 &amp;&amp;</type>
          <declname>str_old</declname>
        </param>
        <param>
          <type>T2 &amp;&amp;</type>
          <declname>str_new</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>pos</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Replace sth in the string with sth else. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str_old</parametername>
</parameternamelist>
<parameterdescription>
<para>Replace this value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str_new</parametername>
</parameternamelist>
<parameterdescription>
<para>Replaced with this value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>Start from this position to replace </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classmml_1_1string" kindref="compound">mml::string</ref> </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>: if str_old is empty </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="363" column="26" bodyfile="include/mml/standards.hpp" bodystart="363" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1af4ba9b1d51391a4a9ecd3425dd6d1389" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t mml::string::rfind</definition>
        <argsstring>(char letter, std::size_t pos=std::string::npos, std::size_t end=0) const noexcept</argsstring>
        <name>rfind</name>
        <param>
          <type>char</type>
          <declname>letter</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>pos</declname>
          <defval>std::string::npos</defval>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>end</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get position of last occurance of a character. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>letter</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be found </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>Position where to begin to search to the right </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>Position where to stop the search from the right </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::size_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="389" column="13" bodyfile="include/mml/standards.hpp" bodystart="389" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1aec19cf1c64718ba66e141ce000b2631f" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t mml::string::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
<para>Compute size of the string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::size_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="396" column="13" bodyfile="src/string.cpp" bodystart="242" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1aa2f72690f91fcc23c35696b841113ce6" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classmml_1_1string" kindref="compound">mml::string</ref></type>
        <definition>mml::string mml::string::substr</definition>
        <argsstring>(std::size_t pos1) const noexcept</argsstring>
        <name>substr</name>
        <param>
          <type>std::size_t</type>
          <declname>pos1</declname>
        </param>
        <briefdescription>
<para>Create a substring starting from this position to the end. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos1</parametername>
</parameternamelist>
<parameterdescription>
<para>Start position to the end </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classmml_1_1string" kindref="compound">mml::string</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="403" column="13" bodyfile="src/string.cpp" bodystart="184" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1a80f53083f18111f3275fc969813b7627" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classmml_1_1string" kindref="compound">mml::string</ref></type>
        <definition>mml::string mml::string::substr</definition>
        <argsstring>(std::size_t pos1, std::size_t length1) const noexcept</argsstring>
        <name>substr</name>
        <param>
          <type>std::size_t</type>
          <declname>pos1</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>length1</declname>
        </param>
        <briefdescription>
<para>Create substring. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos1</parametername>
</parameternamelist>
<parameterdescription>
<para>Start position </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length1</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classmml_1_1string" kindref="compound">mml::string</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="411" column="13" bodyfile="src/string.cpp" bodystart="180" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1acd79728f48f9641b45f0f5f777685af9" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classmml_1_1string" kindref="compound">mml::string</ref></type>
        <definition>mml::string mml::string::sub</definition>
        <argsstring>(std::size_t beg, std::size_t end) const noexcept</argsstring>
        <name>sub</name>
        <param>
          <type>std::size_t</type>
          <declname>beg</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Create a substring starting and ending of specific positions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>beg</parametername>
</parameternamelist>
<parameterdescription>
<para>Start of the new string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>End of the new string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classmml_1_1string" kindref="compound">mml::string</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="419" column="13" bodyfile="src/string.cpp" bodystart="189" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1a6ce6136021002bfc903372de89590bda" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int mml::string::stoi</definition>
        <argsstring>() const noexcept</argsstring>
        <name>stoi</name>
        <briefdescription>
<para>Transform this instance to an integer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="425" column="5" bodyfile="src/string.cpp" bodystart="265" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1a9c4555e270ca374821544047d91003ab" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mml::string::str</definition>
        <argsstring>() const noexcept</argsstring>
        <name>str</name>
        <briefdescription>
<para>Return the value of this instance as a std::string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="431" column="13" bodyfile="src/string.cpp" bodystart="246" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1a383642a9a45445f48097de31824ebf59" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mml::string::writeline</definition>
        <argsstring>(std::ofstream &amp;output) const noexcept</argsstring>
        <name>writeline</name>
        <param>
          <type>std::ofstream &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Write this instance into the end of a file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>Write to this output file stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="438" column="6" bodyfile="src/string.cpp" bodystart="250" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1a0e7f8de4221289eab119e2a7367c9b34" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mml::string::writeline</definition>
        <argsstring>(std::string output) const noexcept</argsstring>
        <name>writeline</name>
        <param>
          <type>std::string</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Write this instance into the end of a file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>Path to the file </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="445" column="6" bodyfile="src/string.cpp" bodystart="254" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1string_1a11756fff9d0e1677b4404c98ac98d435" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mml::string::~string</definition>
        <argsstring>()</argsstring>
        <name>~string</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="447" column="1" bodyfile="include/mml/standards.hpp" bodystart="447" bodyend="447"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classmml_1_1string_1a745716a55996ec76c24b86ae15b93b8e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const string &amp;String) noexcept</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classmml_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>String</declname>
        </param>
        <briefdescription>
<para>Output the value of the string via a stream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>output stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>String</parametername>
</parameternamelist>
<parameterdescription>
<para>Value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ostream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="91" column="8" bodyfile="include/mml/standards.hpp" bodystart="91" bodyend="94"/>
      </memberdef>
      <memberdef kind="friend" id="classmml_1_1string_1ae2969aae0d5dae67e02f7e8f82d6c342" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream&amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;in, string &amp;String) noexcept</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classmml_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>String</declname>
        </param>
        <briefdescription>
<para>Input the value of the string via a stream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>Input stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>String</parametername>
</parameternamelist>
<parameterdescription>
<para>Value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>istream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/standards.hpp" line="102" column="21" bodyfile="include/mml/standards.hpp" bodystart="102" bodyend="105"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Class string which adds additional functions to std::string </para>
    </detaileddescription>
    <location file="include/mml/standards.hpp" line="28" column="1" bodyfile="include/mml/standards.hpp" bodystart="28" bodyend="448"/>
    <listofallmembers>
      <member refid="classmml_1_1string_1acfcc45f75a69e87f0699738b8443412c" prot="private" virt="non-virtual"><scope>mml::string</scope><name>_exist</name></member>
      <member refid="classmml_1_1string_1a3e5acb34d8d3dba2b5971970bb345679" prot="public" virt="non-virtual"><scope>mml::string</scope><name>atof</name></member>
      <member refid="classmml_1_1string_1aa014e1a0fc78a28d7a99c6a83cd4b486" prot="public" virt="non-virtual"><scope>mml::string</scope><name>atoi</name></member>
      <member refid="classmml_1_1string_1a66057297d6504b42f1c397b15c377359" prot="public" virt="non-virtual"><scope>mml::string</scope><name>begin</name></member>
      <member refid="classmml_1_1string_1ab05ba61105f8c99256c2828593a87528" prot="public" virt="non-virtual"><scope>mml::string</scope><name>begin</name></member>
      <member refid="classmml_1_1string_1a17a10d669d0ccefc87e0d756cb23de7a" prot="public" virt="non-virtual"><scope>mml::string</scope><name>c_str</name></member>
      <member refid="classmml_1_1string_1a948f7256bc8c59fc12e7a1fcb2d761a1" prot="public" virt="non-virtual"><scope>mml::string</scope><name>clear</name></member>
      <member refid="classmml_1_1string_1a35e3e6685c5364e0ddfd68f1a7d60bdf" prot="private" virt="non-virtual"><scope>mml::string</scope><name>const_iterator</name></member>
      <member refid="classmml_1_1string_1ad445fefff4ea3faf11a24689dc43ba96" prot="public" virt="non-virtual"><scope>mml::string</scope><name>count</name></member>
      <member refid="classmml_1_1string_1a73cb6c24174f5832d939817432733c45" prot="public" virt="non-virtual"><scope>mml::string</scope><name>cout</name></member>
      <member refid="classmml_1_1string_1ae4d49ea8a844bbd5cd9bdcafc10167a4" prot="public" virt="non-virtual"><scope>mml::string</scope><name>del_letter</name></member>
      <member refid="classmml_1_1string_1a1e44a0c0630173b390e469fe1ea7e2cd" prot="public" virt="non-virtual"><scope>mml::string</scope><name>del_number</name></member>
      <member refid="classmml_1_1string_1a971215481fb9080179fc9c7f22b43e5c" prot="public" virt="non-virtual"><scope>mml::string</scope><name>del_space</name></member>
      <member refid="classmml_1_1string_1aa9ce2d895b544f4e5b2d9f7845030d81" prot="public" virt="non-virtual"><scope>mml::string</scope><name>empty</name></member>
      <member refid="classmml_1_1string_1a80c23eafaa8bd703214a915eadb08892" prot="public" virt="non-virtual"><scope>mml::string</scope><name>end</name></member>
      <member refid="classmml_1_1string_1a81b4a8f4b92871877fd9fbe01e3e169f" prot="public" virt="non-virtual"><scope>mml::string</scope><name>end</name></member>
      <member refid="classmml_1_1string_1a7b69360e58b51d0a5bf5a0a80ae18016" prot="public" virt="non-virtual"><scope>mml::string</scope><name>exist</name></member>
      <member refid="classmml_1_1string_1a89a49641b8fd8b0d75ec3d3622b2398a" prot="public" virt="non-virtual"><scope>mml::string</scope><name>find</name></member>
      <member refid="classmml_1_1string_1ae941485426daada6dfa640f297cb7062" prot="public" virt="non-virtual"><scope>mml::string</scope><name>find</name></member>
      <member refid="classmml_1_1string_1ae5ef197e443356af7e277376e4cb84a7" prot="public" virt="non-virtual"><scope>mml::string</scope><name>getline</name></member>
      <member refid="classmml_1_1string_1a83806c5e9d92585f57f9ef2dbaf67e07" prot="public" virt="non-virtual"><scope>mml::string</scope><name>getline</name></member>
      <member refid="classmml_1_1string_1a3be0681c2f790864554bc70e1fade183" prot="public" virt="non-virtual"><scope>mml::string</scope><name>getValue</name></member>
      <member refid="classmml_1_1string_1a8d274341148ce54f85f1a50ea5b0e5f9" prot="public" virt="non-virtual"><scope>mml::string</scope><name>hash</name></member>
      <member refid="classmml_1_1string_1a3da80d33f5aa244511801c6eba736c91" prot="private" virt="non-virtual"><scope>mml::string</scope><name>iterator</name></member>
      <member refid="classmml_1_1string_1ada3e20559af145a083b0efe8f3dbe60a" prot="public" virt="non-virtual"><scope>mml::string</scope><name>log</name></member>
      <member refid="classmml_1_1string_1a4860b64f242e6602b3be8b8ee2e71b02" prot="public" virt="non-virtual"><scope>mml::string</scope><name>lower</name></member>
      <member refid="classmml_1_1string_1a91f2537027d7dc0bf3fa612885f07e83" prot="public" virt="non-virtual"><scope>mml::string</scope><name>ls</name></member>
      <member refid="classmml_1_1string_1ade5bf437b0ffd5a3bd4ecc1480bb9088" prot="public" virt="non-virtual"><scope>mml::string</scope><name>ls</name></member>
      <member refid="classmml_1_1string_1a2ad1a6e9455c045c56dcf148e4540e82" prot="public" virt="non-virtual"><scope>mml::string</scope><name>mkdir_p</name></member>
      <member refid="classmml_1_1string_1a24b0963f2fd25358a59d31de781bdee1" prot="public" virt="non-virtual"><scope>mml::string</scope><name>operator!=</name></member>
      <member refid="classmml_1_1string_1a65172ea4fe29abb123ac12f905d6c51b" prot="public" virt="non-virtual"><scope>mml::string</scope><name>operator()</name></member>
      <member refid="classmml_1_1string_1a416b20bb48149ff912bea8d85db1979f" prot="public" virt="non-virtual"><scope>mml::string</scope><name>operator()</name></member>
      <member refid="classmml_1_1string_1aacf903537609817f57c9351b99c298cc" prot="public" virt="non-virtual"><scope>mml::string</scope><name>operator+</name></member>
      <member refid="classmml_1_1string_1a02cafc3fa2871839d9e234651a989c4d" prot="public" virt="non-virtual"><scope>mml::string</scope><name>operator+=</name></member>
      <member refid="classmml_1_1string_1a745716a55996ec76c24b86ae15b93b8e" prot="public" virt="non-virtual"><scope>mml::string</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmml_1_1string_1a44ceac8e8ff4252b607c882cb2fafb51" prot="public" virt="non-virtual"><scope>mml::string</scope><name>operator=</name></member>
      <member refid="classmml_1_1string_1a2dc8532f18b16a12e3d5230554c1fbb3" prot="public" virt="non-virtual"><scope>mml::string</scope><name>operator==</name></member>
      <member refid="classmml_1_1string_1ae2969aae0d5dae67e02f7e8f82d6c342" prot="public" virt="non-virtual"><scope>mml::string</scope><name>operator&gt;&gt;</name></member>
      <member refid="classmml_1_1string_1a754a104abb34fd9842cd5869566bfdb5" prot="public" virt="non-virtual"><scope>mml::string</scope><name>operator[]</name></member>
      <member refid="classmml_1_1string_1a21139f53285c374c383759f61010f185" prot="public" virt="non-virtual"><scope>mml::string</scope><name>operator[]</name></member>
      <member refid="classmml_1_1string_1a9fa1fba30f50aecf44c069ba9e89bdab" prot="public" virt="non-virtual"><scope>mml::string</scope><name>remove</name></member>
      <member refid="classmml_1_1string_1a9939471a850c71c8e18d7e0a5413edb3" prot="public" virt="non-virtual"><scope>mml::string</scope><name>replace</name></member>
      <member refid="classmml_1_1string_1af4ba9b1d51391a4a9ecd3425dd6d1389" prot="public" virt="non-virtual"><scope>mml::string</scope><name>rfind</name></member>
      <member refid="classmml_1_1string_1aec19cf1c64718ba66e141ce000b2631f" prot="public" virt="non-virtual"><scope>mml::string</scope><name>size</name></member>
      <member refid="classmml_1_1string_1a6ce6136021002bfc903372de89590bda" prot="public" virt="non-virtual"><scope>mml::string</scope><name>stoi</name></member>
      <member refid="classmml_1_1string_1a9c4555e270ca374821544047d91003ab" prot="public" virt="non-virtual"><scope>mml::string</scope><name>str</name></member>
      <member refid="classmml_1_1string_1a027b118294677870eccf9ff59d4b1e96" prot="public" virt="non-virtual"><scope>mml::string</scope><name>string</name></member>
      <member refid="classmml_1_1string_1aa83d5b5500921e4d782ef18e16ac83dc" prot="public" virt="non-virtual"><scope>mml::string</scope><name>string</name></member>
      <member refid="classmml_1_1string_1a3b3ab50be8db94f7a37bcb98bd32469a" prot="public" virt="non-virtual"><scope>mml::string</scope><name>string</name></member>
      <member refid="classmml_1_1string_1acd79728f48f9641b45f0f5f777685af9" prot="public" virt="non-virtual"><scope>mml::string</scope><name>sub</name></member>
      <member refid="classmml_1_1string_1aa2f72690f91fcc23c35696b841113ce6" prot="public" virt="non-virtual"><scope>mml::string</scope><name>substr</name></member>
      <member refid="classmml_1_1string_1a80f53083f18111f3275fc969813b7627" prot="public" virt="non-virtual"><scope>mml::string</scope><name>substr</name></member>
      <member refid="classmml_1_1string_1a85dc98333607d441a7ef28dc0bd0281a" prot="private" virt="non-virtual"><scope>mml::string</scope><name>temp</name></member>
      <member refid="classmml_1_1string_1ad0d748a84b091ce5a634140f716dbeec" prot="private" virt="non-virtual"><scope>mml::string</scope><name>to_mml</name></member>
      <member refid="classmml_1_1string_1a8835de31377f2c4441fb88a724b3d269" prot="private" virt="non-virtual"><scope>mml::string</scope><name>value</name></member>
      <member refid="classmml_1_1string_1a383642a9a45445f48097de31824ebf59" prot="public" virt="non-virtual"><scope>mml::string</scope><name>writeline</name></member>
      <member refid="classmml_1_1string_1a0e7f8de4221289eab119e2a7367c9b34" prot="public" virt="non-virtual"><scope>mml::string</scope><name>writeline</name></member>
      <member refid="classmml_1_1string_1a11756fff9d0e1677b4404c98ac98d435" prot="public" virt="non-virtual"><scope>mml::string</scope><name>~string</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classmml_1_1vector" kind="class" language="C++" prot="public">
    <compoundname>mml::vector</compoundname>
    <includes refid="vector_8hpp" local="no">vector.hpp</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; mml::vector&lt; T &gt;::vec</definition>
        <argsstring></argsstring>
        <name>vec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="31" column="13" bodyfile="include/mml/vector.hpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmml_1_1vector_1ae33ede1abf01d6d2579d554e0e4ece65" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mml::vector&lt; T &gt;::vector</definition>
        <argsstring>()</argsstring>
        <name>vector</name>
        <briefdescription>
<para>Constructors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="37" column="9" bodyfile="include/mml/vector.hpp" bodystart="37" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1afe08d7126fba37526915840d75476787" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mml::vector&lt; T &gt;::vector</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;temp)</argsstring>
        <name>vector</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>temp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="38" column="9" bodyfile="include/mml/vector.hpp" bodystart="38" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a699277331e90ad4745e747ca986ca014" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mml::vector&lt; T &gt;::vector</definition>
        <argsstring>(const mml::vector&lt; T &gt; &amp;temp)</argsstring>
        <name>vector</name>
        <param>
          <type>const <ref refid="classmml_1_1vector" kindref="compound">mml::vector</ref>&lt; T &gt; &amp;</type>
          <declname>temp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="39" column="9" bodyfile="include/mml/vector.hpp" bodystart="39" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a4c33b7774ac7303c95fb4be1195059da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mml::vector&lt; T &gt;::vector</definition>
        <argsstring>(double temp)</argsstring>
        <name>vector</name>
        <param>
          <type>double</type>
          <declname>temp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="40" column="9" bodyfile="include/mml/vector.hpp" bodystart="40" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a12d163b0b93882c366b0fbd9bee30e64" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mml::vector&lt; T &gt;::vector</definition>
        <argsstring>(int cols, T temp)</argsstring>
        <name>vector</name>
        <param>
          <type>int</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>T</type>
          <declname>temp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="41" column="9" bodyfile="include/mml/vector.hpp" bodystart="41" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1aab00229f585e0382fc1ff5c89cd77816" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mml::vector&lt; T &gt;::vector</definition>
        <argsstring>(int cols, std::vector&lt; T &gt; temp)</argsstring>
        <name>vector</name>
        <param>
          <type>int</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt;</type>
          <declname>temp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="42" column="9" bodyfile="include/mml/vector.hpp" bodystart="42" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1add2b8c228c9f3be8fcad971b7e22a429" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mml::vector&lt; T &gt;::vector</definition>
        <argsstring>(std::initializer_list&lt; T &gt; initList)</argsstring>
        <name>vector</name>
        <param>
          <type>std::initializer_list&lt; T &gt;</type>
          <declname>initList</declname>
        </param>
        <briefdescription>
<para>Construct with a list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>initList</parametername>
</parameternamelist>
<parameterdescription>
<para>Initializer_list </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>this instance </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="49" column="1" bodyfile="include/mml/vector.hpp" bodystart="49" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a8dcf3737728770802554ed5183d4bb23" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::vector&lt; T &gt;::iterator</type>
        <definition>std::vector&lt;T&gt;::iterator mml::vector&lt; T &gt;::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
<para>iterator to the beginning of the vector </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="55" column="33" bodyfile="include/mml/vector.hpp" bodystart="55" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a5030ae731771646b8aee2e57159d5f30" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::vector&lt; T &gt;::const_iterator</type>
        <definition>std::vector&lt;T&gt;::const_iterator mml::vector&lt; T &gt;::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Constant Iterator to the beginning of the vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="61" column="39" bodyfile="include/mml/vector.hpp" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a89101b66495138c79158b841e403d1b8" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t mml::vector&lt; T &gt;::count</definition>
        <argsstring>(T value) const noexcept</argsstring>
        <name>count</name>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Count how many entries are equal to a value <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be checked </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::size_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="68" column="13" bodyfile="include/mml/vector.hpp" bodystart="68" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a124fb60011746652ebfcafe3815ba6c9" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mml::vector&lt; T &gt;::cout</definition>
        <argsstring>(bool newline=false) const noexcept</argsstring>
        <name>cout</name>
        <param>
          <type>bool</type>
          <declname>newline</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>print elements in the vector </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newline</parametername>
</parameternamelist>
<parameterdescription>
<para>Print with line breaks </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="81" column="6" bodyfile="include/mml/vector.hpp" bodystart="81" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a1e7183f3df81ba57b2b161091119d591" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; mml::vector&lt; T &gt;::del</definition>
        <argsstring>() noexcept</argsstring>
        <name>del</name>
        <briefdescription>
<para>Empties the vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::vector&lt;T&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="106" column="13" bodyfile="include/mml/vector.hpp" bodystart="106" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a8e411ecf7cb856e1eea7245f6b5d5c75" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mml::vector&lt; T &gt;::empty</definition>
        <argsstring>() const noexcept</argsstring>
        <name>empty</name>
        <briefdescription>
<para>Checks whether the vector is empty. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="116" column="6" bodyfile="include/mml/vector.hpp" bodystart="116" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a58a162fc048ef944b8196a4051982ed8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::vector&lt; T &gt;::iterator</type>
        <definition>std::vector&lt;T&gt;::iterator mml::vector&lt; T &gt;::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <briefdescription>
<para>Iterator to the end of the vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="122" column="33" bodyfile="include/mml/vector.hpp" bodystart="122" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1ade47add457b0bffaf36e70a23b7f91e8" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::vector&lt; T &gt;::const_iterator</type>
        <definition>std::vector&lt;T&gt;::const_iterator mml::vector&lt; T &gt;::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <briefdescription>
<para>Const. iterator to the end of the vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="128" column="39" bodyfile="include/mml/vector.hpp" bodystart="128" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a9c6ac6de56377585c640f7cf4526b865" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mml::vector&lt; T &gt;::erase</definition>
        <argsstring>(size_t position)</argsstring>
        <name>erase</name>
        <param>
          <type>size_t</type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Erase an element from the vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>Position to be erase </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>if position &gt;= <ref refid="classmml_1_1vector_1a009b3e42dba375229367bf85a5018e36" kindref="member">vector.size()</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="136" column="6" bodyfile="include/mml/vector.hpp" bodystart="136" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a45f83c9f49ea3cf4b6bd2544bfdd808c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mml::vector&lt; T &gt;::erase</definition>
        <argsstring>(size_t start, size_t end)</argsstring>
        <name>erase</name>
        <param>
          <type>size_t</type>
          <declname>start</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Erase a range from the vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>Start position </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>End position </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>: if start &gt; end || end &gt; <ref refid="classmml_1_1vector_1a009b3e42dba375229367bf85a5018e36" kindref="member">vector.size()</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="149" column="6" bodyfile="include/mml/vector.hpp" bodystart="149" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a1200bc7fab32e46a22c0f787b58e514b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>values</declname>
            <defname>values</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool mml::vector&lt; T &gt;::exist</definition>
        <argsstring>(const values &amp;... value) const noexcept</argsstring>
        <name>exist</name>
        <param>
          <type>const values &amp;...</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Check if one <emphasis>or</emphasis> another string exists. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameters to be checked if they exist </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="171" column="6" bodyfile="include/mml/vector.hpp" bodystart="171" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a232246d8905a5b7beab2d96ac9b928f8" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t mml::vector&lt; T &gt;::find</definition>
        <argsstring>(const T value, size_t start=0) const noexcept</argsstring>
        <name>find</name>
        <param>
          <type>const T</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>start</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return a position of an element. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be looked for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>Defines at what position to start to be looked for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::size_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="181" column="13" bodyfile="include/mml/vector.hpp" bodystart="181" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a15c357eea5a88f6903fbbf2f902449d3" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::vector&lt; T &gt;::iterator</type>
        <definition>std::vector&lt;T&gt;::iterator mml::vector&lt; T &gt;::insert</definition>
        <argsstring>(const typename std::vector&lt; T &gt;::iterator position, const T &amp;val) noexcept</argsstring>
        <name>insert</name>
        <param>
          <type>const typename std::vector&lt; T &gt;::iterator</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Insert a value at a specific position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The position where the value is put </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="195" column="33" bodyfile="include/mml/vector.hpp" bodystart="195" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1aa22e06b6eacca2a750e594c54df08de4" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mml::vector&lt; T &gt;::log</definition>
        <argsstring>(mml::string logpath, bool newline=false, mml::string first=&quot;&quot;, mml::string last=&quot;&quot;, mml::string separator=&quot;,&quot;) const noexcept</argsstring>
        <name>log</name>
        <param>
          <type><ref refid="classmml_1_1string" kindref="compound">mml::string</ref></type>
          <declname>logpath</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>newline</declname>
          <defval>false</defval>
        </param>
        <param>
          <type><ref refid="classmml_1_1string" kindref="compound">mml::string</ref></type>
          <declname>first</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type><ref refid="classmml_1_1string" kindref="compound">mml::string</ref></type>
          <declname>last</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type><ref refid="classmml_1_1string" kindref="compound">mml::string</ref></type>
          <declname>separator</declname>
          <defval>&quot;,&quot;</defval>
        </param>
        <briefdescription>
<para>Write values into a logfile. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>logpath</parametername>
</parameternamelist>
<parameterdescription>
<para>Path of the logfile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newline</parametername>
</parameternamelist>
<parameterdescription>
<para>Print a newline </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>Print this in the start of the logfile before any value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>Print this at the end of the logfile after all vlaues are written </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>separator</parametername>
</parameternamelist>
<parameterdescription>
<para>Separation sign after each value if newline = false </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="205" column="6" bodyfile="include/mml/vector.hpp" bodystart="205" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a843e3921478ba5901bdf4826f25ca766" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classmml_1_1vector" kindref="compound">vector</ref> &amp;</type>
        <definition>vector&amp; mml::vector&lt; T &gt;::operator=</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;temp) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>temp</declname>
        </param>
        <briefdescription>
<para>Assign value with equal sign. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>temp</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector with values </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to this instance </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="230" column="8" bodyfile="include/mml/vector.hpp" bodystart="230" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a237af268e6e5e26994d18f0a57e6e615" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classmml_1_1vector" kindref="compound">vector</ref> &amp;</type>
        <definition>vector&amp; mml::vector&lt; T &gt;::operator=</definition>
        <argsstring>(const mml::vector&lt; T &gt; &amp;temp) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classmml_1_1vector" kindref="compound">mml::vector</ref>&lt; T &gt; &amp;</type>
          <declname>temp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="231" column="8" bodyfile="include/mml/vector.hpp" bodystart="231" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1ade81b1e79cf8cfdf66c28cf9ea3da910" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; mml::vector&lt; T &gt;::operator[]</definition>
        <argsstring>(int index)</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Returns a value at a specific index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index to be returned </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value at this index </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>: if index not in range </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="239" column="3" bodyfile="include/mml/vector.hpp" bodystart="239" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a7b93a68aed9fb7e898e9752ee0629a03" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; mml::vector&lt; T &gt;::operator[]</definition>
        <argsstring>(int index) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="246" column="9" bodyfile="include/mml/vector.hpp" bodystart="246" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a9ccb7128d5b50664aed646273abf2f54" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mml::vector&lt; T &gt;::operator==</definition>
        <argsstring>(const mml::vector&lt; T &gt; &amp;vec) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classmml_1_1vector" kindref="compound">mml::vector</ref>&lt; T &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Check if vectors are the same. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to be checked </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the same </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="259" column="6" bodyfile="include/mml/vector.hpp" bodystart="259" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a0ff9434d2a1e701bbb0d62e035718bf4" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mml::vector&lt; T &gt;::operator!=</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;vec) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Check if vectors are not the same. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to be checked </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if not the same </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="266" column="6" bodyfile="include/mml/vector.hpp" bodystart="266" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a15ad0dfc3eef8609bf9f621821cefa60" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmml_1_1vector" kindref="compound">vector</ref>&lt; T &gt;</type>
        <definition>vector&lt;T&gt; mml::vector&lt; T &gt;::operator*</definition>
        <argsstring>(const T &amp;value) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Scalarmultiplication. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be multiplied </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vektor </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>logic_error</parametername>
</parameternamelist>
<parameterdescription>
<para>: if vector empty or type is not a number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="274" column="8" bodyfile="include/mml/vector.hpp" bodystart="274" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1aa1e76ce928f0025c21b4ca42e227b4cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmml_1_1vector" kindref="compound">vector</ref>&lt; T &gt;</type>
        <definition>vector&lt;T&gt; mml::vector&lt; T &gt;::operator*=</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Scalarmultiplication. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be multiplied </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Instance of the class </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>logic_error</parametername>
</parameternamelist>
<parameterdescription>
<para>: if vector empty or type is not a number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="293" column="8" bodyfile="include/mml/vector.hpp" bodystart="293" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a02678cc8198a3290d3d647c3459f8a00" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmml_1_1vector" kindref="compound">vector</ref>&lt; T &gt;</type>
        <definition>vector&lt;T&gt; mml::vector&lt; T &gt;::operator+</definition>
        <argsstring>(const T &amp;value) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Add a value to each element. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be added </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector with the added value </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>logic_error</parametername>
</parameternamelist>
<parameterdescription>
<para>: if vector is empty </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="311" column="8" bodyfile="include/mml/vector.hpp" bodystart="311" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a16d7de3e21e86095a82e23e99e6415b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmml_1_1vector" kindref="compound">vector</ref>&lt; T &gt;</type>
        <definition>vector&lt;T&gt; mml::vector&lt; T &gt;::operator+=</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Add a value to each element. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be added </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Instance of the class </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>logic_error</parametername>
</parameternamelist>
<parameterdescription>
<para>: if vector is empty </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="327" column="8" bodyfile="include/mml/vector.hpp" bodystart="327" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a52a03839ada0f63201ccb6d52394ed9a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmml_1_1vector" kindref="compound">mml::vector</ref>&lt; T &gt;</type>
        <definition>mml::vector&lt;T&gt; mml::vector&lt; T &gt;::operator+</definition>
        <argsstring>(vector&lt; T &gt; temp) const</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classmml_1_1vector" kindref="compound">vector</ref>&lt; T &gt;</type>
          <declname>temp</declname>
        </param>
        <briefdescription>
<para>Add a vector to this vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>temp</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to be added elementwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>resulting vector </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>logic_error</parametername>
</parameternamelist>
<parameterdescription>
<para>: if vector sizes are not the same </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="342" column="13" bodyfile="include/mml/vector.hpp" bodystart="342" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1ae42b8172bc702bff9d2f3dcc41d21db6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmml_1_1vector" kindref="compound">mml::vector</ref>&lt; T &gt;</type>
        <definition>mml::vector&lt;T&gt; mml::vector&lt; T &gt;::operator+=</definition>
        <argsstring>(mml::vector&lt; T &gt; temp)</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="classmml_1_1vector" kindref="compound">mml::vector</ref>&lt; T &gt;</type>
          <declname>temp</declname>
        </param>
        <briefdescription>
<para>Add a vector to this vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>temp</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to be added elementwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Instance of this class </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>logic_error</parametername>
</parameternamelist>
<parameterdescription>
<para>: if vector sizes are not the same </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="359" column="13" bodyfile="include/mml/vector.hpp" bodystart="359" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a54cc079045c143fb7a543089dfd007be" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmml_1_1vector" kindref="compound">mml::vector</ref>&lt; T &gt;</type>
        <definition>mml::vector&lt;T&gt; mml::vector&lt; T &gt;::operator^</definition>
        <argsstring>(const T exponent) const</argsstring>
        <name>operator^</name>
        <param>
          <type>const T</type>
          <declname>exponent</declname>
        </param>
        <briefdescription>
<para>Vector^() </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exponent</parametername>
</parameternamelist>
<parameterdescription>
<para>Exponent </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>vector </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>logic_error</parametername>
</parameternamelist>
<parameterdescription>
<para>: if type is not numeric </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="377" column="13" bodyfile="include/mml/vector.hpp" bodystart="377" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1ac971bc51f4e13b7829110ff3abb9b94a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmml_1_1vector" kindref="compound">mml::vector</ref>&lt; T &gt;</type>
        <definition>mml::vector&lt;T&gt; mml::vector&lt; T &gt;::operator^=</definition>
        <argsstring>(const T exponent)</argsstring>
        <name>operator^=</name>
        <param>
          <type>const T</type>
          <declname>exponent</declname>
        </param>
        <briefdescription>
<para>Vector^() </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exponent</parametername>
</parameternamelist>
<parameterdescription>
<para>Exponent </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Instance of the class </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>logic_error</parametername>
</parameternamelist>
<parameterdescription>
<para>: if type is not numeric </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="395" column="13" bodyfile="include/mml/vector.hpp" bodystart="395" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a1393d9931fe936f267791067f2bea877" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mml::vector&lt; T &gt;::pop_back</definition>
        <argsstring>() noexcept</argsstring>
        <name>pop_back</name>
        <briefdescription>
<para>Removes the last entry. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>None </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="437" column="6" bodyfile="include/mml/vector.hpp" bodystart="437" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a27424a774d46cbbf509f47ab8c801de0" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mml::vector&lt; T &gt;::push_back</definition>
        <argsstring>(T value) noexcept</argsstring>
        <name>push_back</name>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Adds an element at the end. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>to e added </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="445" column="6" bodyfile="include/mml/vector.hpp" bodystart="445" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a70cdc7cc551a2c5e9acd0c1f18fc6d1b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; mml::vector&lt; T &gt;::replace</definition>
        <argsstring>(T Old, T New) noexcept</argsstring>
        <name>replace</name>
        <param>
          <type>T</type>
          <declname>Old</declname>
        </param>
        <param>
          <type>T</type>
          <declname>New</declname>
        </param>
        <briefdescription>
<para>Replace specific elements with another element. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Old</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be replaced </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>New</parametername>
</parameternamelist>
<parameterdescription>
<para>New value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector with the replaced values </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="455" column="13" bodyfile="include/mml/vector.hpp" bodystart="455" bodyend="463"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a6e15f0519463ea24dbfeb014f9381656" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mml::vector&lt; T &gt;::set</definition>
        <argsstring>(std::vector&lt; T &gt; Vec) noexcept</argsstring>
        <name>set</name>
        <param>
          <type>std::vector&lt; T &gt;</type>
          <declname>Vec</declname>
        </param>
        <briefdescription>
<para>Replace the vector with a new vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Vec</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="469" column="6" bodyfile="include/mml/vector.hpp" bodystart="469" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a009b3e42dba375229367bf85a5018e36" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t mml::vector&lt; T &gt;::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
<para>Size of the vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Size of the vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="477" column="13" bodyfile="include/mml/vector.hpp" bodystart="477" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1acfacaf78023f4f300cfad46a666740d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; mml::vector&lt; T &gt;::sort</definition>
        <argsstring>()</argsstring>
        <name>sort</name>
        <briefdescription>
<para>Sort the vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return the sorted vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="483" column="13" bodyfile="include/mml/vector.hpp" bodystart="483" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1aa78b9774322f062ef212f9f5f84873dd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T mml::vector&lt; T &gt;::sum</definition>
        <argsstring>() const</argsstring>
        <name>sum</name>
        <briefdescription>
<para>Determine the sum of the vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Sum of the vector </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>logic_error</parametername>
</parameternamelist>
<parameterdescription>
<para>: if vector is empty or if template is boolean </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="490" column="3" bodyfile="include/mml/vector.hpp" bodystart="490" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1af978a35f6c899469c985ec65e9f9f9cb" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; mml::vector&lt; T &gt;::tovec</definition>
        <argsstring>() const noexcept</argsstring>
        <name>tovec</name>
        <briefdescription>
<para>Return the std::vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Vector of the standard library </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="521" column="22" bodyfile="include/mml/vector.hpp" bodystart="521" bodyend="521"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classmml_1_1vector_1ab5d3202dc65b9d1ae65daf62b8114afd" prot="private" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mml::vector&lt; T &gt;::_exist</definition>
        <argsstring>(const T &amp;name) const noexcept</argsstring>
        <name>_exist</name>
        <param>
          <type>const T &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Check if a string exists in the vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>String to be checked </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="162" column="6" bodyfile="include/mml/vector.hpp" bodystart="162" bodyend="162"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classmml_1_1vector_1a7224e4650e76335a445d3577bb24e377" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const vector&lt; T &gt; &amp;Vec) noexcept</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classmml_1_1vector" kindref="compound">vector</ref>&lt; T &gt; &amp;</type>
          <declname>Vec</declname>
        </param>
        <briefdescription>
<para>Print the vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>Output where it is written </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Vec</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector which is written </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>output stream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="412" column="8" bodyfile="include/mml/vector.hpp" bodystart="412" bodyend="417"/>
      </memberdef>
      <memberdef kind="friend" id="classmml_1_1vector_1a612263cfe9350459c56fd68000d2fb06" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream&amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;in, const vector&lt; T &gt; &amp;v) noexcept</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const <ref refid="classmml_1_1vector" kindref="compound">vector</ref>&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Writes a value into the vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>where it should be written in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>what should be written in </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>output stream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="425" column="21" bodyfile="include/mml/vector.hpp" bodystart="425" bodyend="431"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/mml/vector.hpp" line="29" column="1" bodyfile="include/mml/vector.hpp" bodystart="29" bodyend="523"/>
    <listofallmembers>
      <member refid="classmml_1_1vector_1ab5d3202dc65b9d1ae65daf62b8114afd" prot="private" virt="non-virtual"><scope>mml::vector</scope><name>_exist</name></member>
      <member refid="classmml_1_1vector_1a8dcf3737728770802554ed5183d4bb23" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>begin</name></member>
      <member refid="classmml_1_1vector_1a5030ae731771646b8aee2e57159d5f30" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>begin</name></member>
      <member refid="classmml_1_1vector_1a89101b66495138c79158b841e403d1b8" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>count</name></member>
      <member refid="classmml_1_1vector_1a124fb60011746652ebfcafe3815ba6c9" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>cout</name></member>
      <member refid="classmml_1_1vector_1a1e7183f3df81ba57b2b161091119d591" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>del</name></member>
      <member refid="classmml_1_1vector_1a8e411ecf7cb856e1eea7245f6b5d5c75" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>empty</name></member>
      <member refid="classmml_1_1vector_1a58a162fc048ef944b8196a4051982ed8" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>end</name></member>
      <member refid="classmml_1_1vector_1ade47add457b0bffaf36e70a23b7f91e8" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>end</name></member>
      <member refid="classmml_1_1vector_1a9c6ac6de56377585c640f7cf4526b865" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>erase</name></member>
      <member refid="classmml_1_1vector_1a45f83c9f49ea3cf4b6bd2544bfdd808c" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>erase</name></member>
      <member refid="classmml_1_1vector_1a1200bc7fab32e46a22c0f787b58e514b" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>exist</name></member>
      <member refid="classmml_1_1vector_1a232246d8905a5b7beab2d96ac9b928f8" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>find</name></member>
      <member refid="classmml_1_1vector_1a15c357eea5a88f6903fbbf2f902449d3" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>insert</name></member>
      <member refid="classmml_1_1vector_1aa22e06b6eacca2a750e594c54df08de4" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>log</name></member>
      <member refid="classmml_1_1vector_1a0ff9434d2a1e701bbb0d62e035718bf4" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>operator!=</name></member>
      <member refid="classmml_1_1vector_1a15ad0dfc3eef8609bf9f621821cefa60" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>operator*</name></member>
      <member refid="classmml_1_1vector_1aa1e76ce928f0025c21b4ca42e227b4cf" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>operator*=</name></member>
      <member refid="classmml_1_1vector_1a02678cc8198a3290d3d647c3459f8a00" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>operator+</name></member>
      <member refid="classmml_1_1vector_1a52a03839ada0f63201ccb6d52394ed9a" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>operator+</name></member>
      <member refid="classmml_1_1vector_1a16d7de3e21e86095a82e23e99e6415b7" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>operator+=</name></member>
      <member refid="classmml_1_1vector_1ae42b8172bc702bff9d2f3dcc41d21db6" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>operator+=</name></member>
      <member refid="classmml_1_1vector_1a7224e4650e76335a445d3577bb24e377" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmml_1_1vector_1a843e3921478ba5901bdf4826f25ca766" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>operator=</name></member>
      <member refid="classmml_1_1vector_1a237af268e6e5e26994d18f0a57e6e615" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>operator=</name></member>
      <member refid="classmml_1_1vector_1a9ccb7128d5b50664aed646273abf2f54" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>operator==</name></member>
      <member refid="classmml_1_1vector_1a612263cfe9350459c56fd68000d2fb06" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>operator&gt;&gt;</name></member>
      <member refid="classmml_1_1vector_1ade81b1e79cf8cfdf66c28cf9ea3da910" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>operator[]</name></member>
      <member refid="classmml_1_1vector_1a7b93a68aed9fb7e898e9752ee0629a03" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>operator[]</name></member>
      <member refid="classmml_1_1vector_1a54cc079045c143fb7a543089dfd007be" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>operator^</name></member>
      <member refid="classmml_1_1vector_1ac971bc51f4e13b7829110ff3abb9b94a" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>operator^=</name></member>
      <member refid="classmml_1_1vector_1a1393d9931fe936f267791067f2bea877" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>pop_back</name></member>
      <member refid="classmml_1_1vector_1a27424a774d46cbbf509f47ab8c801de0" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>push_back</name></member>
      <member refid="classmml_1_1vector_1a70cdc7cc551a2c5e9acd0c1f18fc6d1b" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>replace</name></member>
      <member refid="classmml_1_1vector_1a6e15f0519463ea24dbfeb014f9381656" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>set</name></member>
      <member refid="classmml_1_1vector_1a009b3e42dba375229367bf85a5018e36" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>size</name></member>
      <member refid="classmml_1_1vector_1acfacaf78023f4f300cfad46a666740d2" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>sort</name></member>
      <member refid="classmml_1_1vector_1aa78b9774322f062ef212f9f5f84873dd" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>sum</name></member>
      <member refid="classmml_1_1vector_1af978a35f6c899469c985ec65e9f9f9cb" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>tovec</name></member>
      <member refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" prot="protected" virt="non-virtual"><scope>mml::vector</scope><name>vec</name></member>
      <member refid="classmml_1_1vector_1ae33ede1abf01d6d2579d554e0e4ece65" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>vector</name></member>
      <member refid="classmml_1_1vector_1afe08d7126fba37526915840d75476787" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>vector</name></member>
      <member refid="classmml_1_1vector_1a699277331e90ad4745e747ca986ca014" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>vector</name></member>
      <member refid="classmml_1_1vector_1a4c33b7774ac7303c95fb4be1195059da" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>vector</name></member>
      <member refid="classmml_1_1vector_1a12d163b0b93882c366b0fbd9bee30e64" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>vector</name></member>
      <member refid="classmml_1_1vector_1aab00229f585e0382fc1ff5c89cd77816" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>vector</name></member>
      <member refid="classmml_1_1vector_1add2b8c228c9f3be8fcad971b7e22a429" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>vector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

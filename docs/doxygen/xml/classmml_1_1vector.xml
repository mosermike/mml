<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classmml_1_1vector" kind="class" language="C++" prot="public">
    <compoundname>mml::vector</compoundname>
    <basecompoundref prot="private" virt="non-virtual">std::vector&lt; T &gt;</basecompoundref>
    <includes refid="vector_8hpp" local="no">vector.hpp</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; mml::vector&lt; T &gt;::vec</definition>
        <argsstring></argsstring>
        <name>vec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="31" column="13" bodyfile="include/mml/vector.hpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmml_1_1vector_1ae33ede1abf01d6d2579d554e0e4ece65" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mml::vector&lt; T &gt;::vector</definition>
        <argsstring>()</argsstring>
        <name>vector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>constructor</para>
</simplesect>
<simplesect kind="author"><para>Mike </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="39" column="9" bodyfile="include/mml/vector.hpp" bodystart="39" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1ad44c393d85ce94e01ae6d851abfe3a60" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mml::vector&lt; T &gt;::vector</definition>
        <argsstring>(const vector &amp;temp)</argsstring>
        <name>vector</name>
        <param>
          <type>const <ref refid="classmml_1_1vector" kindref="compound">vector</ref> &amp;</type>
          <declname>temp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="40" column="9" bodyfile="include/mml/vector.hpp" bodystart="40" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1ac6bb999219a514400d27c3ae0a1c38d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mml::vector&lt; T &gt;::vector</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;temp)</argsstring>
        <name>vector</name>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>temp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="41" column="9" bodyfile="include/mml/vector.hpp" bodystart="41" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a110a81cb89a1d8d3747a59ec4bb12ec3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mml::vector&lt; T &gt;::vector</definition>
        <argsstring>(mml::vector&lt; T &gt; &amp;temp)</argsstring>
        <name>vector</name>
        <param>
          <type><ref refid="classmml_1_1vector" kindref="compound">mml::vector</ref>&lt; T &gt; &amp;</type>
          <declname>temp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="42" column="9" bodyfile="include/mml/vector.hpp" bodystart="42" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a4c33b7774ac7303c95fb4be1195059da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mml::vector&lt; T &gt;::vector</definition>
        <argsstring>(double temp)</argsstring>
        <name>vector</name>
        <param>
          <type>double</type>
          <declname>temp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="43" column="9" bodyfile="include/mml/vector.hpp" bodystart="43" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a12d163b0b93882c366b0fbd9bee30e64" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mml::vector&lt; T &gt;::vector</definition>
        <argsstring>(int cols, T temp)</argsstring>
        <name>vector</name>
        <param>
          <type>int</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>T</type>
          <declname>temp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="44" column="9" bodyfile="include/mml/vector.hpp" bodystart="44" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1aab00229f585e0382fc1ff5c89cd77816" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mml::vector&lt; T &gt;::vector</definition>
        <argsstring>(int cols, std::vector&lt; T &gt; temp)</argsstring>
        <name>vector</name>
        <param>
          <type>int</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt;</type>
          <declname>temp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="45" column="9" bodyfile="include/mml/vector.hpp" bodystart="45" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a52d2bb1a8ce2c1fe10784fe52d22803b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmml_1_1vector" kindref="compound">vector</ref></type>
        <definition>vector mml::vector&lt; T &gt;::operator=</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;temp)</argsstring>
        <name>operator=</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>temp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="47" column="8" bodyfile="include/mml/vector.hpp" bodystart="47" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a72f4406c5722f9fb621ea2afdd722877" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmml_1_1vector" kindref="compound">vector</ref></type>
        <definition>vector mml::vector&lt; T &gt;::operator=</definition>
        <argsstring>(mml::vector&lt; T &gt; temp)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classmml_1_1vector" kindref="compound">mml::vector</ref>&lt; T &gt;</type>
          <declname>temp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="48" column="8" bodyfile="include/mml/vector.hpp" bodystart="48" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a8dcf3737728770802554ed5183d4bb23" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::vector&lt; T &gt;::iterator</type>
        <definition>std::vector&lt;T&gt;::iterator mml::vector&lt; T &gt;::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Standardfunktionen aus std::vector</para>
</simplesect>
<simplesect kind="author"><para>Mike </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="55" column="33" bodyfile="include/mml/vector.hpp" bodystart="55" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a3853ad9b92cb418a26057005f11c1b23" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>template bool mml::vector&lt; T &gt;::empty</definition>
        <argsstring>() noexcept</argsstring>
        <name>empty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para><ref refid="classmml_1_1string" kindref="compound">mml::string</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="56" column="6" bodyfile="include/mml/vector.hpp" bodystart="56" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a58a162fc048ef944b8196a4051982ed8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::vector&lt; T &gt;::iterator</type>
        <definition>std::vector&lt;T&gt;::iterator mml::vector&lt; T &gt;::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="59" column="33" bodyfile="include/mml/vector.hpp" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a5a043eee4418d727d68b6f77ba0c5e5b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; T &gt;::iterator</type>
        <definition>std::vector&lt;T&gt;::iterator mml::vector&lt; T &gt;::erase</definition>
        <argsstring>(typename std::vector&lt; T &gt;::iterator start, typename std::vector&lt; T &gt;::iterator amount=0)</argsstring>
        <name>erase</name>
        <param>
          <type>typename std::vector&lt; T &gt;::iterator</type>
          <declname>start</declname>
        </param>
        <param>
          <type>typename std::vector&lt; T &gt;::iterator</type>
          <declname>amount</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="60" column="33" bodyfile="include/mml/vector.hpp" bodystart="60" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1ae4cae150b7b30e91e3b937d7a529a16f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; T &gt;::iterator</type>
        <definition>std::vector&lt;T&gt;::iterator mml::vector&lt; T &gt;::insert</definition>
        <argsstring>(const typename std::vector&lt; T &gt;::iterator position, const T &amp;val)</argsstring>
        <name>insert</name>
        <param>
          <type>const typename std::vector&lt; T &gt;::iterator</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="61" column="33" bodyfile="include/mml/vector.hpp" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1ade81b1e79cf8cfdf66c28cf9ea3da910" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; mml::vector&lt; T &gt;::operator[]</definition>
        <argsstring>(int index)</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="62" column="3" bodyfile="include/mml/vector.hpp" bodystart="62" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a9f0bde55f6f6514461e624c6426ef6fc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>template void mml::vector&lt; T &gt;::pop_back</definition>
        <argsstring>()</argsstring>
        <name>pop_back</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="68" column="6" bodyfile="include/mml/vector.hpp" bodystart="68" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a0f23f42bb84218cdd6ec2cc523933e0e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>template void mml::vector&lt; T &gt;::push_back</definition>
        <argsstring>(T value)</argsstring>
        <name>push_back</name>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="72" column="6" bodyfile="include/mml/vector.hpp" bodystart="72" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a4acab0d5c924664fe2b216b94f06c9b2" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>template std::size_t mml::vector&lt; T &gt;::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="75" column="13" bodyfile="include/mml/vector.hpp" bodystart="75" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a5f13b0c1d8c38fa1641a3af44af9416b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>template void mml::vector&lt; T &gt;::cout</definition>
        <argsstring>(bool newline=false) noexcept</argsstring>
        <name>cout</name>
        <param>
          <type>bool</type>
          <declname>newline</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Vektorinhalt ausgeben</para>
</simplesect>
<simplesect kind="author"><para>Mike </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="107" column="6" bodyfile="include/mml/vector.hpp" bodystart="107" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a6277254d3ae5f6921c1d7d854feac214" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; T &gt;</type>
        <definition>template std::vector&lt; mml::string &gt; mml::vector&lt; T &gt;::del</definition>
        <argsstring>()</argsstring>
        <name>del</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Vektor leeren</para>
</simplesect>
<simplesect kind="author"><para>Mike </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="131" column="14" bodyfile="include/mml/vector.hpp" bodystart="131" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1ac4b25f2693130108499bb71f565cc558" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>template bool mml::vector&lt; T &gt;::exist</definition>
        <argsstring>(T const &amp;value)</argsstring>
        <name>exist</name>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>exist</para>
</simplesect>
<simplesect kind="return"><para>bool </para>
</simplesect>
<simplesect kind="author"><para>Mike </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="142" column="6" bodyfile="include/mml/vector.hpp" bodystart="142" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1ae2121141f484344e07345eddf7caa77c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>template mml::string mml::vector&lt; T &gt;::toT</definition>
        <argsstring>(mml::string s)</argsstring>
        <name>toT</name>
        <param>
          <type><ref refid="classmml_1_1string" kindref="compound">mml::string</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>String in T umwandeln</para>
</simplesect>
<simplesect kind="return"><para>T </para>
</simplesect>
<simplesect kind="author"><para>Mike </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="174" column="3" bodyfile="include/mml/vector.hpp" bodystart="174" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a846b3b92f10f17eee061c39ef2b1848f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>template void mml::vector&lt; T &gt;::get_data</definition>
        <argsstring>(std::string filepath, int skip=-1)</argsstring>
        <name>get_data</name>
        <param>
          <type>std::string</type>
          <declname>filepath</declname>
        </param>
        <param>
          <type>int</type>
          <declname>skip</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>get data from file</para>
</simplesect>
<simplesect kind="author"><para>Mike </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="189" column="7" bodyfile="include/mml/vector.hpp" bodystart="189" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a50fbac82c7e83bc826d02ff2b3c44820" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>template std::size_t mml::vector&lt; T &gt;::find</definition>
        <argsstring>(const T value)</argsstring>
        <name>find</name>
        <param>
          <type>const T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Position zurückgeben</para>
</simplesect>
<simplesect kind="return"><para>std::size_t </para>
</simplesect>
<simplesect kind="author"><para>Mike </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="218" column="13" bodyfile="include/mml/vector.hpp" bodystart="218" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a35466b7dc2f7af8333b354edc7475001" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>template void mml::vector&lt; T &gt;::log</definition>
        <argsstring>(mml::string logpath, bool newline=false, mml::string first=&quot;&quot;, mml::string last=&quot;&quot;)</argsstring>
        <name>log</name>
        <param>
          <type><ref refid="classmml_1_1string" kindref="compound">mml::string</ref></type>
          <declname>logpath</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>newline</declname>
          <defval>false</defval>
        </param>
        <param>
          <type><ref refid="classmml_1_1string" kindref="compound">mml::string</ref></type>
          <declname>first</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type><ref refid="classmml_1_1string" kindref="compound">mml::string</ref></type>
          <declname>last</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Werte in eine Logdatei schreiben</para>
</simplesect>
<simplesect kind="author"><para>Mike </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="237" column="6" bodyfile="include/mml/vector.hpp" bodystart="237" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1aff5f8402662b01d3eef81aab88dc112a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; T &gt;</type>
        <definition>template std::vector&lt; mml::string &gt; mml::vector&lt; T &gt;::replace</definition>
        <argsstring>(T old, T new1)</argsstring>
        <name>replace</name>
        <param>
          <type>T</type>
          <declname>old</declname>
        </param>
        <param>
          <type>T</type>
          <declname>new1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Ersetzen eines Wertes in einem Vektor</para>
</simplesect>
<simplesect kind="return"><para>Vektor mit den ersetzten Werten </para>
</simplesect>
<simplesect kind="author"><para>Mike </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="257" column="13" bodyfile="include/mml/vector.hpp" bodystart="257" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1ae12feeb04e187d250995d67b327eac9d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmml_1_1vector" kindref="compound">vector</ref>&lt; T &gt;</type>
        <definition>vector&lt;T&gt; mml::vector&lt; T &gt;::operator*</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>operator*</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Skalarmultiplikation</para>
</simplesect>
<simplesect kind="return"><para>Vektor </para>
</simplesect>
<simplesect kind="author"><para>Mike </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="283" column="8" bodyfile="include/mml/vector.hpp" bodystart="283" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a901fab5579bf780856051f9493ffbb69" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mml::vector&lt; T &gt;::set</definition>
        <argsstring>(std::vector&lt; T &gt; temp)</argsstring>
        <name>set</name>
        <param>
          <type>std::vector&lt; T &gt;</type>
          <declname>temp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Skalare Addition</para>
</simplesect>
<simplesect kind="author"><para>Mike </para>
</simplesect>
<simplesect kind="note"><para>vec setzen</para>
</simplesect>
<simplesect kind="author"><para>Mike </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="299" column="6" bodyfile="include/mml/vector.hpp" bodystart="299" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a09c4bf51180082747d807fd1d8d5ae84" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>template mml::string mml::vector&lt; T &gt;::sum</definition>
        <argsstring>()</argsstring>
        <name>sum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>vec sortieren</para>
</simplesect>
<simplesect kind="author"><para>Mike </para>
</simplesect>
<simplesect kind="note"><para>Summe des Vektors bestimmen</para>
</simplesect>
<simplesect kind="return"><para>T </para>
</simplesect>
<simplesect kind="author"><para>Mike </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="314" column="3" bodyfile="include/mml/vector.hpp" bodystart="314" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a521aa464534c98ecd70315632ad25f25" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; T &gt;</type>
        <definition>template std::vector&lt; mml::string &gt; mml::vector&lt; T &gt;::operator+</definition>
        <argsstring>(mml::vector&lt; T &gt; temp)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classmml_1_1vector" kindref="compound">mml::vector</ref>&lt; T &gt;</type>
          <declname>temp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Zwei Vektoren zeilenweise addieren</para>
</simplesect>
<simplesect kind="return"><para>Vektor </para>
</simplesect>
<simplesect kind="author"><para>Mike </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="329" column="13" bodyfile="include/mml/vector.hpp" bodystart="329" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a372daa94b7f21f06a70a755111114ee6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; T &gt;</type>
        <definition>template std::vector&lt; mml::string &gt; mml::vector&lt; T &gt;::operator+=</definition>
        <argsstring>(mml::vector&lt; T &gt; temp)</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="classmml_1_1vector" kindref="compound">mml::vector</ref>&lt; T &gt;</type>
          <declname>temp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="341" column="13" bodyfile="include/mml/vector.hpp" bodystart="341" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a935789a9cb1c2a8acdeedac8f5179278" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; T &gt;</type>
        <definition>template std::vector&lt; mml::string &gt; mml::vector&lt; T &gt;::operator^</definition>
        <argsstring>(const double exponent)</argsstring>
        <name>operator^</name>
        <param>
          <type>const double</type>
          <declname>exponent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Vektor hoch exponent</para>
</simplesect>
<simplesect kind="return"><para>Vektor </para>
</simplesect>
<simplesect kind="author"><para>Mike </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="358" column="13" bodyfile="include/mml/vector.hpp" bodystart="358" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="classmml_1_1vector_1a4526d4a08cea6b802ee229868250a7b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; mml::vector&lt; T &gt;::tovec</definition>
        <argsstring>()</argsstring>
        <name>tovec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Vektor zurückgeben</para>
</simplesect>
<simplesect kind="return"><para>Vektor </para>
</simplesect>
<simplesect kind="author"><para>Mike </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="380" column="22" bodyfile="include/mml/vector.hpp" bodystart="380" bodyend="380"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classmml_1_1vector_1afdee463d65e61d05a5210e324b42e9ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const vector&lt; T &gt; &amp;Vec)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classmml_1_1vector" kindref="compound">vector</ref>&lt; T &gt; &amp;</type>
          <declname>Vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Vektorinhalt ausgeben</para>
</simplesect>
<simplesect kind="author"><para>Mike </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="85" column="8" bodyfile="include/mml/vector.hpp" bodystart="85" bodyend="90"/>
      </memberdef>
      <memberdef kind="friend" id="classmml_1_1vector_1a6684f15487209798bee55f69e848cb87" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream&amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;in, vector&lt; T &gt; &amp;Vec)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classmml_1_1vector" kindref="compound">vector</ref>&lt; T &gt; &amp;</type>
          <declname>Vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Wert in Vektor reinschreiben</para>
</simplesect>
<simplesect kind="author"><para>Mike </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mml/vector.hpp" line="96" column="21" bodyfile="include/mml/vector.hpp" bodystart="96" bodyend="101"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>std::vector&lt; T &gt;</label>
      </node>
      <node id="1">
        <label>mml::vector&lt; T &gt;</label>
        <link refid="classmml_1_1vector"/>
        <childnode refid="2" relation="private-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>std::vector&lt; T &gt;</label>
      </node>
      <node id="1">
        <label>mml::vector&lt; T &gt;</label>
        <link refid="classmml_1_1vector"/>
        <childnode refid="2" relation="private-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/mml/vector.hpp" line="29" column="1" bodyfile="include/mml/vector.hpp" bodystart="29" bodyend="407"/>
    <listofallmembers>
      <member refid="classmml_1_1vector_1a8dcf3737728770802554ed5183d4bb23" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>begin</name></member>
      <member refid="classmml_1_1vector_1a5f13b0c1d8c38fa1641a3af44af9416b" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>cout</name></member>
      <member refid="classmml_1_1vector_1a6277254d3ae5f6921c1d7d854feac214" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>del</name></member>
      <member refid="classmml_1_1vector_1a3853ad9b92cb418a26057005f11c1b23" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>empty</name></member>
      <member refid="classmml_1_1vector_1a58a162fc048ef944b8196a4051982ed8" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>end</name></member>
      <member refid="classmml_1_1vector_1a5a043eee4418d727d68b6f77ba0c5e5b" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>erase</name></member>
      <member refid="classmml_1_1vector_1ac4b25f2693130108499bb71f565cc558" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>exist</name></member>
      <member refid="classmml_1_1vector_1a50fbac82c7e83bc826d02ff2b3c44820" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>find</name></member>
      <member refid="classmml_1_1vector_1a846b3b92f10f17eee061c39ef2b1848f" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>get_data</name></member>
      <member refid="classmml_1_1vector_1ae4cae150b7b30e91e3b937d7a529a16f" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>insert</name></member>
      <member refid="classmml_1_1vector_1a35466b7dc2f7af8333b354edc7475001" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>log</name></member>
      <member refid="classmml_1_1vector_1ae12feeb04e187d250995d67b327eac9d" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>operator*</name></member>
      <member refid="classmml_1_1vector_1a521aa464534c98ecd70315632ad25f25" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>operator+</name></member>
      <member refid="classmml_1_1vector_1a372daa94b7f21f06a70a755111114ee6" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>operator+=</name></member>
      <member refid="classmml_1_1vector_1afdee463d65e61d05a5210e324b42e9ce" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>operator&lt;&lt;</name></member>
      <member refid="classmml_1_1vector_1a52d2bb1a8ce2c1fe10784fe52d22803b" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>operator=</name></member>
      <member refid="classmml_1_1vector_1a72f4406c5722f9fb621ea2afdd722877" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>operator=</name></member>
      <member refid="classmml_1_1vector_1a6684f15487209798bee55f69e848cb87" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>operator&gt;&gt;</name></member>
      <member refid="classmml_1_1vector_1ade81b1e79cf8cfdf66c28cf9ea3da910" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>operator[]</name></member>
      <member refid="classmml_1_1vector_1a935789a9cb1c2a8acdeedac8f5179278" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>operator^</name></member>
      <member refid="classmml_1_1vector_1a9f0bde55f6f6514461e624c6426ef6fc" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>pop_back</name></member>
      <member refid="classmml_1_1vector_1a0f23f42bb84218cdd6ec2cc523933e0e" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>push_back</name></member>
      <member refid="classmml_1_1vector_1aff5f8402662b01d3eef81aab88dc112a" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>replace</name></member>
      <member refid="classmml_1_1vector_1a901fab5579bf780856051f9493ffbb69" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>set</name></member>
      <member refid="classmml_1_1vector_1a4acab0d5c924664fe2b216b94f06c9b2" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>size</name></member>
      <member refid="classmml_1_1vector_1a09c4bf51180082747d807fd1d8d5ae84" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>sum</name></member>
      <member refid="classmml_1_1vector_1ae2121141f484344e07345eddf7caa77c" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>toT</name></member>
      <member refid="classmml_1_1vector_1a4526d4a08cea6b802ee229868250a7b3" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>tovec</name></member>
      <member refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" prot="protected" virt="non-virtual"><scope>mml::vector</scope><name>vec</name></member>
      <member refid="classmml_1_1vector_1ae33ede1abf01d6d2579d554e0e4ece65" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>vector</name></member>
      <member refid="classmml_1_1vector_1ad44c393d85ce94e01ae6d851abfe3a60" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>vector</name></member>
      <member refid="classmml_1_1vector_1ac6bb999219a514400d27c3ae0a1c38d8" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>vector</name></member>
      <member refid="classmml_1_1vector_1a110a81cb89a1d8d3747a59ec4bb12ec3" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>vector</name></member>
      <member refid="classmml_1_1vector_1a4c33b7774ac7303c95fb4be1195059da" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>vector</name></member>
      <member refid="classmml_1_1vector_1a12d163b0b93882c366b0fbd9bee30e64" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>vector</name></member>
      <member refid="classmml_1_1vector_1aab00229f585e0382fc1ff5c89cd77816" prot="public" virt="non-virtual"><scope>mml::vector</scope><name>vector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

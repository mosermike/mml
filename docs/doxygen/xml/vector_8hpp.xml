<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="vector_8hpp" kind="file" language="C++">
    <compoundname>vector.hpp</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">vector</includes>
    <includes local="no">string</includes>
    <includes refid="standards_8hpp" local="yes">standards.hpp</includes>
    <includes local="no">algorithm</includes>
    <includes refid="log_8hpp" local="yes">log.hpp</includes>
    <includedby refid="shell_8hpp" local="yes">include/mml/shell.hpp</includedby>
    <includedby refid="mml_8hpp" local="yes">include/mml.hpp</includedby>
    <incdepgraph>
      <node id="9">
        <label>float.h</label>
      </node>
      <node id="5">
        <label>standards.hpp</label>
        <link refid="standards_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>string</label>
      </node>
      <node id="12">
        <label>fstream</label>
      </node>
      <node id="8">
        <label>random</label>
      </node>
      <node id="7">
        <label>string.h</label>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
      <node id="6">
        <label>sstream</label>
      </node>
      <node id="2">
        <label>iostream</label>
      </node>
      <node id="1">
        <label>include/mml/vector.hpp</label>
        <link refid="vector_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>log.hpp</label>
        <link refid="log_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>algorithm</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="15">
        <label>src/arg.cpp</label>
        <link refid="arg_8cpp"/>
      </node>
      <node id="12">
        <label>src/Unix.cpp</label>
        <link refid="Unix_8cpp"/>
      </node>
      <node id="13">
        <label>src/User.cpp</label>
        <link refid="User_8cpp"/>
      </node>
      <node id="4">
        <label>src/file.cpp</label>
        <link refid="file_8cpp"/>
      </node>
      <node id="10">
        <label>src/Thread.cpp</label>
        <link refid="Thread_8cpp"/>
      </node>
      <node id="9">
        <label>src/string.cpp</label>
        <link refid="string_8cpp"/>
      </node>
      <node id="7">
        <label>src/shell.cpp</label>
        <link refid="shell_8cpp"/>
      </node>
      <node id="11">
        <label>src/Timer.cpp</label>
        <link refid="Timer_8cpp"/>
      </node>
      <node id="6">
        <label>src/help.cpp</label>
        <link refid="help_8cpp"/>
      </node>
      <node id="2">
        <label>include/mml/shell.hpp</label>
        <link refid="shell_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>include/mml.hpp</label>
        <link refid="mml_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>src/log.cpp</label>
        <link refid="log_8cpp"/>
      </node>
      <node id="5">
        <label>src/functions.cpp</label>
        <link refid="functions_8cpp"/>
      </node>
      <node id="14">
        <label>test/test1.cpp</label>
        <link refid="test1_8cpp"/>
      </node>
      <node id="1">
        <label>include/mml/vector.hpp</label>
        <link refid="vector_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>src/standards.cpp</label>
        <link refid="standards_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classmml_1_1vector" prot="public">mml::vector</innerclass>
    <innernamespace refid="namespacemml">mml</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Mike Moser</para>
</simplesect>
<simplesect kind="note"><para>Enth√§lt verschiedene Standardfunktionen </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MML_INCLUDE_MML_VECTOR_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MML_INCLUDE_MML_VECTOR_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="standards_8hpp" kindref="compound">standards.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>std::sort</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//#include<sp/>&quot;shell.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="log_8hpp" kindref="compound">log.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>todo<sp/>count<sp/>how<sp/>many<sp/>entries<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacemml" kindref="compound">mml</ref>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//class<sp/>string;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>print<sp/>out<sp/>things<sp/>from<sp/>mml::shell</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight></codeline>
<codeline lineno="29" refid="classmml_1_1vector" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmml_1_1vector" kindref="compound">vector</ref><sp/>:<sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/><ref refid="namespacemml_1_1functions_1aed3e32c593011593a726a6c90cf24be5" kindref="member">std::vector</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="31" refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>elements<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="39" refid="classmml_1_1vector_1ae33ede1abf01d6d2579d554e0e4ece65" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmml_1_1vector_1ae33ede1abf01d6d2579d554e0e4ece65" kindref="member">vector</ref>()<sp/>:<sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="40" refid="classmml_1_1vector_1ad44c393d85ce94e01ae6d851abfe3a60" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmml_1_1vector_1ad44c393d85ce94e01ae6d851abfe3a60" kindref="member">vector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classmml_1_1vector" kindref="compound">vector</ref><sp/>&amp;temp)<sp/>:<sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>(temp.<ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="41" refid="classmml_1_1vector_1ac6bb999219a514400d27c3ae0a1c38d8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmml_1_1vector_1ac6bb999219a514400d27c3ae0a1c38d8" kindref="member">vector</ref>(std::vector&lt;T&gt;&amp;<sp/>temp)<sp/>:<sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>(temp)<sp/>{}</highlight></codeline>
<codeline lineno="42" refid="classmml_1_1vector_1a110a81cb89a1d8d3747a59ec4bb12ec3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmml_1_1vector_1a110a81cb89a1d8d3747a59ec4bb12ec3" kindref="member">vector</ref>(<ref refid="classmml_1_1vector" kindref="compound">mml::vector&lt;T&gt;</ref>&amp;<sp/>temp)<sp/>:<sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>(temp.<ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="43" refid="classmml_1_1vector_1a4c33b7774ac7303c95fb4be1195059da" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmml_1_1vector_1a4c33b7774ac7303c95fb4be1195059da" kindref="member">vector</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>temp)<sp/>:<sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>(static_cast&lt;size_t&gt;(temp))<sp/>{}</highlight></codeline>
<codeline lineno="44" refid="classmml_1_1vector_1a12d163b0b93882c366b0fbd9bee30e64" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmml_1_1vector_1a12d163b0b93882c366b0fbd9bee30e64" kindref="member">vector</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cols,<sp/>T<sp/>temp)<sp/>:<sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>(cols,<sp/>temp)<sp/>{}</highlight></codeline>
<codeline lineno="45" refid="classmml_1_1vector_1aab00229f585e0382fc1ff5c89cd77816" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmml_1_1vector_1aab00229f585e0382fc1ff5c89cd77816" kindref="member">vector</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cols,<sp/>std::vector&lt;T&gt;<sp/>temp)<sp/>:<sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>(cols,<sp/>temp)<sp/>{}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="classmml_1_1vector_1a52d2bb1a8ce2c1fe10784fe52d22803b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmml_1_1vector" kindref="compound">vector</ref><sp/><ref refid="classmml_1_1vector_1a52d2bb1a8ce2c1fe10784fe52d22803b" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;&amp;<sp/>temp)<sp/>{<ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref><sp/>=<sp/>temp;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;}<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//for(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>temp.size();<sp/>temp++)<sp/>vec.push_back(temp[i]);<sp/>return<sp/>*this;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="classmml_1_1vector_1a72f4406c5722f9fb621ea2afdd722877" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmml_1_1vector" kindref="compound">vector</ref><sp/><ref refid="classmml_1_1vector_1a72f4406c5722f9fb621ea2afdd722877" kindref="member">operator=</ref>(<ref refid="classmml_1_1vector" kindref="compound">mml::vector&lt;T&gt;</ref><sp/>temp)<sp/>{<ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref><sp/>=<sp/>temp.<ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="55" refid="classmml_1_1vector_1a8dcf3737728770802554ed5183d4bb23" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;::iterator<sp/><ref refid="classmml_1_1vector_1a8dcf3737728770802554ed5183d4bb23" kindref="member">begin</ref>()<sp/>noexcept{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>.begin();}</highlight></codeline>
<codeline lineno="56" refid="classmml_1_1vector_1a3853ad9b92cb418a26057005f11c1b23" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classmml_1_1vector_1a3853ad9b92cb418a26057005f11c1b23" kindref="member">empty</ref>()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;vec.empty();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59" refid="classmml_1_1vector_1a58a162fc048ef944b8196a4051982ed8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;::iterator<sp/><ref refid="classmml_1_1vector_1a58a162fc048ef944b8196a4051982ed8" kindref="member">end</ref>()<sp/>noexcept{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>.end();}</highlight></codeline>
<codeline lineno="60" refid="classmml_1_1vector_1a5a043eee4418d727d68b6f77ba0c5e5b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;::iterator<sp/><ref refid="classmml_1_1vector_1a5a043eee4418d727d68b6f77ba0c5e5b" kindref="member">erase</ref>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;::iterator<sp/>start,</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;::iterator<sp/>amount<sp/>=<sp/>0)<sp/>{<ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>.erase(start,start+amount);}</highlight></codeline>
<codeline lineno="61" refid="classmml_1_1vector_1ae4cae150b7b30e91e3b937d7a529a16f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;::iterator<sp/><ref refid="classmml_1_1vector_1ae4cae150b7b30e91e3b937d7a529a16f" kindref="member">insert</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;::iterator<sp/>position,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>val)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>.insert(position,val);}</highlight></codeline>
<codeline lineno="62" refid="classmml_1_1vector_1ade81b1e79cf8cfdf66c28cf9ea3da910" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>&amp;<ref refid="classmml_1_1vector_1ade81b1e79cf8cfdf66c28cf9ea3da910" kindref="member">operator[]</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index){</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>.size()<sp/>+<sp/>index;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>[index];</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68" refid="classmml_1_1vector_1a9f0bde55f6f6514461e624c6426ef6fc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmml_1_1vector_1a9f0bde55f6f6514461e624c6426ef6fc" kindref="member">pop_back</ref>(){</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>.pop_back();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="classmml_1_1vector_1a0f23f42bb84218cdd6ec2cc523933e0e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmml_1_1vector_1a0f23f42bb84218cdd6ec2cc523933e0e" kindref="member">push_back</ref>(T<sp/>value){</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>.push_back(value);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75" refid="classmml_1_1vector_1a4acab0d5c924664fe2b216b94f06c9b2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="classmml_1_1vector_1a4acab0d5c924664fe2b216b94f06c9b2" kindref="member">size</ref>()<sp/>const<sp/>noexcept{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>.size();}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T&amp;<sp/>operator=<sp/>(std::vector&lt;T&gt;<sp/>temp){vec<sp/>=<sp/>temp;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="85" refid="classmml_1_1vector_1afdee463d65e61d05a5210e324b42e9ce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>std::ostream&amp;<sp/><ref refid="classmml_1_1vector_1afdee463d65e61d05a5210e324b42e9ce" kindref="member">operator&lt;&lt; </ref>(std::ostream<sp/>&amp;out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classmml_1_1vector" kindref="compound">vector&lt;T&gt;</ref><sp/>&amp;Vec){<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ausgabe<sp/>√ºber<sp/>std::cout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Vec.<ref refid="classmml_1_1vector_1a4acab0d5c924664fe2b216b94f06c9b2" kindref="member">size</ref>();i++)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>Vec.<ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>[i]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96" refid="classmml_1_1vector_1a6684f15487209798bee55f69e848cb87" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>std::istream&amp;<sp/><ref refid="classmml_1_1vector_1a6684f15487209798bee55f69e848cb87" kindref="member">operator&gt;&gt; </ref>(std::istream<sp/>&amp;in,<sp/><ref refid="classmml_1_1vector" kindref="compound">vector&lt;T&gt;</ref><sp/>&amp;Vec){</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>temp;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>&gt;&gt;<sp/>temp;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vec.<ref refid="classmml_1_1vector_1a0f23f42bb84218cdd6ec2cc523933e0e" kindref="member">push_back</ref>(temp);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>in;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107" refid="classmml_1_1vector_1a5f13b0c1d8c38fa1641a3af44af9416b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmml_1_1vector_1a5f13b0c1d8c38fa1641a3af44af9416b" kindref="member">cout</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>newline<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>noexcept{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacemml_1_1functions_1a5a85af79e53e85778f1f4f71d74abcff" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[cout]<sp/>Vector<sp/>is<sp/>empty&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacemml_1_1functions_1a5a85af79e53e85778f1f4f71d74abcff" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>[0];</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(newline)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacemml_1_1functions_1a5a85af79e53e85778f1f4f71d74abcff" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint32_t<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacemml_1_1functions_1a5a85af79e53e85778f1f4f71d74abcff" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>[i]<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint32_t<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>.size();<sp/>i++)<sp/><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacemml_1_1functions_1a5a85af79e53e85778f1f4f71d74abcff" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacemml_1_1functions_1a5a85af79e53e85778f1f4f71d74abcff" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>[i];</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacemml_1_1functions_1a5a85af79e53e85778f1f4f71d74abcff" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131" refid="classmml_1_1vector_1a6277254d3ae5f6921c1d7d854feac214" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/><sp/><ref refid="classmml_1_1vector_1a6277254d3ae5f6921c1d7d854feac214" kindref="member">del</ref>(){</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!<ref refid="classmml_1_1vector_1a3853ad9b92cb418a26057005f11c1b23" kindref="member">empty</ref>())</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmml_1_1vector_1a9f0bde55f6f6514461e624c6426ef6fc" kindref="member">pop_back</ref>();<sp/></highlight><highlight class="comment">//<sp/>Da<sp/>eine<sp/>Initialisierung<sp/>stattfindet<sp/>am<sp/>Anfang</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142" refid="classmml_1_1vector_1ac4b25f2693130108499bb71f565cc558" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classmml_1_1vector_1ac4b25f2693130108499bb71f565cc558" kindref="member">exist</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>bool<sp/>exist<sp/>=<sp/>false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>if(typeid(T)<sp/>==<sp/>typeid(std::string))<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>for(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec.size();<sp/>i++)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//exist<sp/>=<sp/>true;//vec[i].find(value)<sp/>&lt;<sp/>std::string::npos<sp/>?<sp/>true<sp/>:<sp/>false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(exist)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>else<sp/>if(typeid(T)<sp/>==<sp/>typeid(mml::string))<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>for(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec.size();<sp/>i++)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exist<sp/>=<sp/>true;<sp/>//vec[i].find(value)<sp/>&lt;<sp/>std::string::npos<sp/>?<sp/>true<sp/>:<sp/>false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(exist)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>else<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>[i]<sp/>==<sp/>value)</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174" refid="classmml_1_1vector_1ae2121141f484344e07345eddf7caa77c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/><ref refid="classmml_1_1vector_1ae2121141f484344e07345eddf7caa77c" kindref="member">toT</ref>(<ref refid="classmml_1_1string" kindref="compound">mml::string</ref><sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::istringstream<sp/>stream<sp/>(s.<ref refid="classmml_1_1string_1a16e0e25728c0b409616bfcf53f817a81" kindref="member">str</ref>());</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(T)<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="classmml_1_1string" kindref="compound">mml::string</ref>)<sp/>||<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(T)<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(std::string))<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(s.<ref refid="classmml_1_1string_1ab9889379cbe4368885c9a673f021b52a" kindref="member">exist</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacemml_1_1functions_1a5a85af79e53e85778f1f4f71d74abcff" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[toT]<sp/>everything<sp/>after<sp/>special<sp/>character<sp/>is<sp/>ignored!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>t;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&gt;&gt;<sp/>t;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189" refid="classmml_1_1vector_1a846b3b92f10f17eee061c39ef2b1848f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmml_1_1vector_1a846b3b92f10f17eee061c39ef2b1848f" kindref="member">get_data</ref>(<sp/>std::string<sp/>filepath,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>skip<sp/>=<sp/>-1)<sp/>{<sp/><sp/></highlight><highlight class="comment">//Nach<sp/>dem<sp/>Zeichen<sp/>border<sp/>wird<sp/>ausgegeben</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>doesnt<sp/>work<sp/>because<sp/>of<sp/>toT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value1<sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//String<sp/>aus<sp/>einer<sp/>Linie</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//√ñffne<sp/>die<sp/>Datei:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fstream<sp/>input(filepath);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//√úberpr√ºfung,<sp/>ob<sp/>die<sp/>Datei<sp/>ge√∂ffnet<sp/>wurde</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!input<sp/>){</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;file<sp/>not<sp/>found&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//return<sp/>;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Inhalt<sp/>der<sp/>Datei<sp/>Zahl<sp/>f√ºr<sp/>Zahl<sp/>einlesen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!<sp/>input.eof()){</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacemml_1_1functions_1ad25f2df1d22305eca7a0fecc4e139a71" kindref="member">std::getline</ref>(input,<sp/>value1);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacemml_1_1functions_1a5a85af79e53e85778f1f4f71d74abcff" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/><ref refid="classmml_1_1vector_1ae2121141f484344e07345eddf7caa77c" kindref="member">toT</ref>(value1)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>skip<sp/>)<sp/><sp/></highlight><highlight class="comment">//Korrektur<sp/>des<sp/>Titels,<sp/>das<sp/>als<sp/>Zahl<sp/>0<sp/>verwertet<sp/>wird</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;vec.push_back(<ref refid="classmml_1_1vector_1ae2121141f484344e07345eddf7caa77c" kindref="member">toT</ref>(value1));</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="218" refid="classmml_1_1vector_1a50fbac82c7e83bc826d02ff2b3c44820" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="classmml_1_1vector_1a50fbac82c7e83bc826d02ff2b3c44820" kindref="member">find</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(T)<sp/>!=<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(std::string)<sp/><sp/>||<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(T)<sp/>!=<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="classmml_1_1string" kindref="compound">mml::string</ref>))<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacemml_1_1functions_1a5a85af79e53e85778f1f4f71d74abcff" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[find]<sp/>Umwandlung<sp/>des<sp/>Typids<sp/>notwendig.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>[i]<sp/>==<sp/>value)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacemml_1a21e76265e9a8d7091fe7068aee432c39" kindref="member">mml::to_string</ref>(<ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>[i]).<ref refid="classmml_1_1string_1a1033fe9d14c9bd1d6ca6f95702f8d586" kindref="member">find</ref>(<ref refid="namespacemml_1a21e76265e9a8d7091fe7068aee432c39" kindref="member">mml::to_string</ref>(value).str())<sp/>&lt;<sp/>std::string::npos<sp/>?<sp/>i<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string::npos;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="237" refid="classmml_1_1vector_1a35466b7dc2f7af8333b354edc7475001" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmml_1_1vector_1a35466b7dc2f7af8333b354edc7475001" kindref="member">log</ref>(<ref refid="classmml_1_1string" kindref="compound">mml::string</ref><sp/>logpath,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>newline<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/><ref refid="classmml_1_1string" kindref="compound">mml::string</ref><sp/>first<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/><ref refid="classmml_1_1string" kindref="compound">mml::string</ref><sp/>last<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmml_1_1log" kindref="compound">mml::log</ref><sp/><ref refid="classmml_1_1vector_1a35466b7dc2f7af8333b354edc7475001" kindref="member">log</ref>(logpath);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Etwas<sp/>vorangehendes<sp/>in<sp/>die<sp/>Logdatei</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmml_1_1log" kindref="compound">log</ref>.<ref refid="classmml_1_1log_1a72650d1fb6ec84bed9874d087f542af6" kindref="member">cout</ref>(first,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Werte<sp/>in<sp/>die<sp/>Logdatei</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmml_1_1log" kindref="compound">log</ref>.<ref refid="classmml_1_1log_1a72650d1fb6ec84bed9874d087f542af6" kindref="member">cout</ref>(<ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>[i],newline);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Newline<sp/>oder<sp/>,<sp/>als<sp/>Trennungszeichen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!newline<sp/>&amp;&amp;<sp/>i<sp/>&lt;<sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>.size()-1)</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmml_1_1log" kindref="compound">log</ref>.<ref refid="classmml_1_1log_1a72650d1fb6ec84bed9874d087f542af6" kindref="member">cout</ref>(</highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Etwas<sp/>nachgehendes<sp/>in<sp/>die<sp/>Logdatei</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmml_1_1log" kindref="compound">log</ref>.<ref refid="classmml_1_1log_1a72650d1fb6ec84bed9874d087f542af6" kindref="member">cout</ref>(last,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257" refid="classmml_1_1vector_1aff5f8402662b01d3eef81aab88dc112a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/><ref refid="classmml_1_1vector_1aff5f8402662b01d3eef81aab88dc112a" kindref="member">replace</ref>(T<sp/>old,<sp/>T<sp/>new1)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(T)<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(std::string)<sp/><sp/>||<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(T)<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="classmml_1_1string" kindref="compound">mml::string</ref>))<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmml_1_1string" kindref="compound">mml::string</ref><sp/>temp<sp/>=<sp/><ref refid="namespacemml_1a21e76265e9a8d7091fe7068aee432c39" kindref="member">mml::to_string</ref>(<ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>[i]);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(temp.<ref refid="classmml_1_1string_1ab9889379cbe4368885c9a673f021b52a" kindref="member">exist</ref>(<ref refid="namespacemml_1a21e76265e9a8d7091fe7068aee432c39" kindref="member">mml::to_string</ref>(old).<ref refid="classmml_1_1string_1a16e0e25728c0b409616bfcf53f817a81" kindref="member">str</ref>()))<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>temp.<ref refid="classmml_1_1string_1ad65ae4c3aa93bbba4bc7ccb851df281f" kindref="member">replace</ref>(<ref refid="namespacemml_1a21e76265e9a8d7091fe7068aee432c39" kindref="member">mml::to_string</ref>(old).str(),<ref refid="namespacemml_1a21e76265e9a8d7091fe7068aee432c39" kindref="member">mml::to_string</ref>(new1).str());</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>[i]<sp/>=<sp/><ref refid="classmml_1_1vector_1ae2121141f484344e07345eddf7caa77c" kindref="member">toT</ref>(temp);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>[i]<sp/>==<sp/>old)</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>[i]<sp/>=<sp/>new1;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="283" refid="classmml_1_1vector_1ae12feeb04e187d250995d67b327eac9d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmml_1_1vector" kindref="compound">vector&lt;T&gt;</ref><sp/><ref refid="classmml_1_1vector_1ae12feeb04e187d250995d67b327eac9d" kindref="member">operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>[i]<sp/>*=<sp/>value;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;T&gt;<sp/>s_add(const<sp/>T<sp/>&amp;value);</highlight></codeline>
<codeline lineno="299" refid="classmml_1_1vector_1a901fab5579bf780856051f9493ffbb69" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmml_1_1vector_1a901fab5579bf780856051f9493ffbb69" kindref="member">set</ref>(std::vector&lt;T&gt;<sp/>temp)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref><sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/>sort(bool<sp/>save<sp/>=<sp/>true);</highlight></codeline>
<codeline lineno="314" refid="classmml_1_1vector_1a09c4bf51180082747d807fd1d8d5ae84" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/><ref refid="classmml_1_1vector_1a09c4bf51180082747d807fd1d8d5ae84" kindref="member">sum</ref>()<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>if(typeid(T)<sp/>==<sp/>typeid(std::string)<sp/>||<sp/>typeid(T)<sp/>==<sp/>typeid(mml::string))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>mml::shell::note(&quot;[operator^]<sp/>Achtung<sp/>Umwandlung<sp/>u.U.<sp/>notwendig.&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>temp<sp/>=<sp/><ref refid="classmml_1_1vector_1ae2121141f484344e07345eddf7caa77c" kindref="member">toT</ref>(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>+=<sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>[i];</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>temp;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="329" refid="classmml_1_1vector_1a521aa464534c98ecd70315632ad25f25" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/><ref refid="classmml_1_1vector_1a521aa464534c98ecd70315632ad25f25" kindref="member">operator+</ref>(<ref refid="classmml_1_1vector" kindref="compound">mml::vector&lt;T&gt;</ref><sp/>temp)<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Summe<sp/>nicht<sp/>m√∂glich</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>.size()<sp/>!=<sp/>temp.<ref refid="classmml_1_1vector_1a4acab0d5c924664fe2b216b94f06c9b2" kindref="member">size</ref>())<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacemml_1_1functions_1a5a85af79e53e85778f1f4f71d74abcff" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\e[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;31&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;m&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[SUM]<sp/>Gr√∂√üe<sp/>unterschiedlich.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\e[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;m&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>[i]<sp/>+=<sp/>temp[i];</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341" refid="classmml_1_1vector_1a372daa94b7f21f06a70a755111114ee6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/><ref refid="classmml_1_1vector_1a372daa94b7f21f06a70a755111114ee6" kindref="member">operator+=</ref>(<ref refid="classmml_1_1vector" kindref="compound">mml::vector&lt;T&gt;</ref><sp/>temp)<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Summe<sp/>nicht<sp/>m√∂glich</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>.size()<sp/>!=<sp/>temp.<ref refid="classmml_1_1vector_1a4acab0d5c924664fe2b216b94f06c9b2" kindref="member">size</ref>())<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacemml_1_1functions_1a5a85af79e53e85778f1f4f71d74abcff" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\e[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;31&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;m&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[SUM]<sp/>Gr√∂√üe<sp/>unterschiedlich.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\e[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;m&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>[i]<sp/>+=<sp/>temp[i];</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="358" refid="classmml_1_1vector_1a935789a9cb1c2a8acdeedac8f5179278" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/><ref refid="classmml_1_1vector_1a935789a9cb1c2a8acdeedac8f5179278" kindref="member">operator^</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>exponent)<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(T)<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(std::string)<sp/>||<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(T)<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="classmml_1_1string" kindref="compound">mml::string</ref>))<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacemml_1_1functions_1a5a85af79e53e85778f1f4f71d74abcff" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\e[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;31&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;m&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[operator^]<sp/>Inkompatibler<sp/>Typid&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\e[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;m&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(T)<sp/>!=<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacemml_1_1functions_1a5a85af79e53e85778f1f4f71d74abcff" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\e[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;31&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;m&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[operator^]<sp/>Achtung<sp/>Umwandlung<sp/>u.U.<sp/>notwendig.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\e[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;m&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>[i]<sp/>=<sp/>std::pow(<ref refid="namespacemml_1a55ee60d6d3fb41858d5c3f151044c200" kindref="member">mml::atof</ref>(<ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>[i]),exponent);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="380" refid="classmml_1_1vector_1a4526d4a08cea6b802ee229868250a7b3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;<sp/><ref refid="classmml_1_1vector_1a4526d4a08cea6b802ee229868250a7b3" kindref="member">tovec</ref>()<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classmml_1_1vector_1a3b2d65ffa645eff2e56012d9e7c661e8" kindref="member">vec</ref>;}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>template<sp/>&lt;class<sp/>T&gt;<sp/>std::vector&lt;T&gt;<sp/>mml::vector&lt;T&gt;::sort(bool<sp/>save)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>//<sp/>NOTE<sp/>ineffizient</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>std::vector&lt;std::string&gt;<sp/>temp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>std::vector&lt;T&gt;<sp/>temp1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>for(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec.size();<sp/>i++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>temp[i]<sp/>=<sp/>mml::to_string(vec[i]).str();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>std::sort(temp.begin(),temp.end());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>for(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec.size();<sp/>i++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp1[i]<sp/>=<sp/>toT(temp[i]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>if(save)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>vec<sp/>=<sp/>temp1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>return<sp/>temp1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>template<sp/>&lt;class<sp/>T&gt;<sp/>mml::vector&lt;T&gt;<sp/>mml::vector&lt;T&gt;::s_add(const<sp/>T<sp/>&amp;value)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>for(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vec.size();<sp/>i++)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>vec[i]<sp/>=<sp/>vec[i]<sp/>+<sp/>value;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>return<sp/>vec;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="comment">//<sp/>namespace<sp/>vec{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>/**</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>*<sp/>@note<sp/>std<sp/>vector<sp/>std<sp/>string<sp/>zu<sp/>mml<sp/>vector<sp/>mml<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>*<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>*<sp/>@return<sp/>mml::vector&lt;mml::string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>*<sp/>@author<sp/>Mike</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/><sp/><sp/>mml::vector&lt;mml::string&gt;<sp/>tovec(std::vector&lt;std::string&gt;<sp/>temp)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mml::vector&lt;mml::string&gt;<sp/>temp1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>temp.size();<sp/>i++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp1.push_back(temp[i]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>temp1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="comment">//template<sp/>&lt;&gt;<sp/>mml::vector&lt;mml::string&gt;::vector();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classmml_1_1vector_1a3853ad9b92cb418a26057005f11c1b23" kindref="member">mml::vector&lt;mml::string&gt;::empty</ref>()<sp/>noexcept;</highlight></codeline>
<codeline lineno="432"><highlight class="normal">template<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacemml" kindref="compound">mml</ref>::<ref refid="namespacemml_1_1functions_1aed3e32c593011593a726a6c90cf24be5" kindref="member">vector</ref>&lt;<ref refid="namespacemml" kindref="compound">mml</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;::<ref refid="namespacemml_1_1functions_1a5a85af79e53e85778f1f4f71d74abcff" kindref="member">cout</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>newline<sp/>=<sp/>false)<sp/>noexcept;</highlight></codeline>
<codeline lineno="433"><highlight class="normal">template<sp/>std::<ref refid="namespacemml_1_1functions_1aed3e32c593011593a726a6c90cf24be5" kindref="member">vector</ref>&lt;<ref refid="namespacemml" kindref="compound">mml</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;<sp/><sp/><ref refid="namespacemml" kindref="compound">mml</ref>::<ref refid="namespacemml_1_1functions_1aed3e32c593011593a726a6c90cf24be5" kindref="member">vector</ref>&lt;<ref refid="namespacemml" kindref="compound">mml</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;::del();</highlight></codeline>
<codeline lineno="434"><highlight class="normal">template<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacemml" kindref="compound">mml</ref>::<ref refid="namespacemml_1_1functions_1aed3e32c593011593a726a6c90cf24be5" kindref="member">vector</ref>&lt;<ref refid="namespacemml" kindref="compound">mml</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;::<ref refid="namespacemml_1_1Unix_1ad9cc08a6b5cac18e38361f8e38fad1ca" kindref="member">exist</ref>(const<sp/><ref refid="namespacemml" kindref="compound">mml</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>value);</highlight></codeline>
<codeline lineno="435"><highlight class="normal">template<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacemml" kindref="compound">mml</ref>::<ref refid="namespacemml_1_1functions_1aed3e32c593011593a726a6c90cf24be5" kindref="member">vector</ref>&lt;<ref refid="namespacemml" kindref="compound">mml</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;::get_data(<sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>filepath,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>skip);</highlight></codeline>
<codeline lineno="436"><highlight class="normal">template<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacemml" kindref="compound">mml</ref>::<ref refid="namespacemml_1_1functions_1aed3e32c593011593a726a6c90cf24be5" kindref="member">vector</ref>&lt;<ref refid="namespacemml" kindref="compound">mml</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;::find(const<sp/><ref refid="namespacemml" kindref="compound">mml</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="437"><highlight class="normal">template<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacemml" kindref="compound">mml</ref>::<ref refid="namespacemml_1_1functions_1aed3e32c593011593a726a6c90cf24be5" kindref="member">vector</ref>&lt;<ref refid="namespacemml" kindref="compound">mml</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;::log(<ref refid="namespacemml" kindref="compound">mml</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>logpath,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>newline,<sp/><ref refid="namespacemml" kindref="compound">mml</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>first,<sp/><ref refid="namespacemml" kindref="compound">mml</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>last);</highlight></codeline>
<codeline lineno="438"><highlight class="normal">template<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacemml" kindref="compound">mml</ref>::<ref refid="namespacemml_1_1functions_1aed3e32c593011593a726a6c90cf24be5" kindref="member">vector</ref>&lt;<ref refid="namespacemml" kindref="compound">mml</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;::pop_back();</highlight></codeline>
<codeline lineno="439"><highlight class="normal">template<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacemml" kindref="compound">mml</ref>::<ref refid="namespacemml_1_1functions_1aed3e32c593011593a726a6c90cf24be5" kindref="member">vector</ref>&lt;<ref refid="namespacemml" kindref="compound">mml</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;::push_back(<ref refid="namespacemml" kindref="compound">mml</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="440"><highlight class="normal">template<sp/>std::<ref refid="namespacemml_1_1functions_1aed3e32c593011593a726a6c90cf24be5" kindref="member">vector</ref>&lt;<ref refid="namespacemml" kindref="compound">mml</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;<sp/><ref refid="namespacemml" kindref="compound">mml</ref>::<ref refid="namespacemml_1_1functions_1aed3e32c593011593a726a6c90cf24be5" kindref="member">vector</ref>&lt;<ref refid="namespacemml" kindref="compound">mml</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;::replace(<ref refid="namespacemml" kindref="compound">mml</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>old,<sp/><ref refid="namespacemml" kindref="compound">mml</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>new1);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template<sp/>mml::vector&lt;mml::string&gt;<sp/>mml::vector&lt;mml::string&gt;::s_add(const<sp/>mml::string<sp/>&amp;value);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template<sp/>std::vector&lt;mml::string&gt;<sp/>mml::vector&lt;mml::string&gt;::sort(bool<sp/>save);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal">template<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacemml" kindref="compound">mml</ref>::<ref refid="namespacemml_1_1functions_1aed3e32c593011593a726a6c90cf24be5" kindref="member">vector</ref>&lt;<ref refid="namespacemml" kindref="compound">mml</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;::<ref refid="namespacemml_1_1file_1a97e554f98e4d84fd1ac488fc1e44640d" kindref="member">size</ref>()<sp/>const<sp/>noexcept;</highlight></codeline>
<codeline lineno="444"><highlight class="normal">template<sp/><ref refid="namespacemml" kindref="compound">mml</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="namespacemml" kindref="compound">mml</ref>::<ref refid="namespacemml_1_1functions_1aed3e32c593011593a726a6c90cf24be5" kindref="member">vector</ref>&lt;<ref refid="namespacemml" kindref="compound">mml</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;::sum();</highlight></codeline>
<codeline lineno="445"><highlight class="normal">template<sp/><ref refid="namespacemml" kindref="compound">mml</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="namespacemml" kindref="compound">mml</ref>::<ref refid="namespacemml_1_1functions_1aed3e32c593011593a726a6c90cf24be5" kindref="member">vector</ref>&lt;<ref refid="namespacemml" kindref="compound">mml</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;::toT(<ref refid="namespacemml" kindref="compound">mml</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>s);</highlight></codeline>
<codeline lineno="446"><highlight class="normal">template<sp/>std::<ref refid="namespacemml_1_1functions_1aed3e32c593011593a726a6c90cf24be5" kindref="member">vector</ref>&lt;<ref refid="namespacemml" kindref="compound">mml</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;<sp/><ref refid="namespacemml" kindref="compound">mml</ref>::<ref refid="namespacemml_1_1functions_1aed3e32c593011593a726a6c90cf24be5" kindref="member">vector</ref>&lt;<ref refid="namespacemml" kindref="compound">mml</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;::operator+(<ref refid="namespacemml_1_1functions_1aed3e32c593011593a726a6c90cf24be5" kindref="member">vector</ref>&lt;<ref refid="namespacemml" kindref="compound">mml</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;<sp/>temp);</highlight></codeline>
<codeline lineno="447"><highlight class="normal">template<sp/>std::<ref refid="namespacemml_1_1functions_1aed3e32c593011593a726a6c90cf24be5" kindref="member">vector</ref>&lt;<ref refid="namespacemml" kindref="compound">mml</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;<sp/><ref refid="namespacemml" kindref="compound">mml</ref>::<ref refid="namespacemml_1_1functions_1aed3e32c593011593a726a6c90cf24be5" kindref="member">vector</ref>&lt;<ref refid="namespacemml" kindref="compound">mml</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;::operator+=(<ref refid="namespacemml_1_1functions_1aed3e32c593011593a726a6c90cf24be5" kindref="member">vector</ref>&lt;<ref refid="namespacemml" kindref="compound">mml</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;<sp/>temp);</highlight></codeline>
<codeline lineno="448"><highlight class="normal">template<sp/>std::<ref refid="namespacemml_1_1functions_1aed3e32c593011593a726a6c90cf24be5" kindref="member">vector</ref>&lt;<ref refid="namespacemml" kindref="compound">mml</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;<sp/><ref refid="namespacemml" kindref="compound">mml</ref>::<ref refid="namespacemml_1_1functions_1aed3e32c593011593a726a6c90cf24be5" kindref="member">vector</ref>&lt;<ref refid="namespacemml" kindref="compound">mml</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;::operator^(const<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>exponent);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="include/mml/vector.hpp"/>
  </compounddef>
</doxygen>

.TH "mml::file" 3 "Tue Jun 4 2024" "mml" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mml::file
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBadd_twofiles\fP (std::string filepath_input1, std::string filepath_input2, std::string filepath_output)"
.br
.RI "Opens two textfiles and writes it in another\&. "
.ti -1c
.RI "bool \fBbyteCopy\fP (const std::string &src, const std::string &dest, std::size_t blockSize, bool progress=false)"
.br
.RI "Copy a file\&. "
.ti -1c
.RI "int \fBcopy\fP (\fBmml::string\fP src, \fBmml::string\fP dst, std::string name_in='', std::string name_ex='', size_t blocksize=\fB_100MB\fP, bool verbose=false, bool verbose_debug=false, bool all=false, bool recursive=false, bool force=false, bool progress=false, bool falsewrite=false)"
.br
.RI "Copy the content of the path to a new one\&. "
.ti -1c
.RI "bool \fBequal\fP (std::string src, std::string dst)"
.br
.RI "Compare two files by using the SHA256 algorithm\&. Only works for linux\&. "
.ti -1c
.RI "int32_t \fBfiletype\fP (std::string filepath)"
.br
.RI "Determine the type of an object (directory, file, etc\&.) "
.ti -1c
.RI "std::string \fBhumanread\fP (std::size_t number)"
.br
.RI "Convert number into human readable number\&. "
.ti -1c
.RI "std::size_t \fBnum_lines\fP (std::string path)"
.br
.RI "Determine number of lines in a file\&. "
.ti -1c
.RI "int \fBProgram_exist\fP (std::string program)"
.br
.RI "Checks if a program exists\&. "
.ti -1c
.RI "void \fBremove\fP (std::string file)"
.br
.ti -1c
.RI "void \fBset_date_dir\fP (\fBmml::string\fP src, \fBmml::string\fP dst, std::vector< std::string > ends={'NEF','tif','JPG','jpg','MP4','MOV','PNG','HEIC','JPEG','jpeg','pdf', 'PDF'}, bool recursive=false, bool all=false, bool verbose=false)"
.br
.ti -1c
.RI "std::size_t \fBsize\fP (const std::string &filename)"
.br
.RI "Calculates the size of a file\&. "
.ti -1c
.RI "std::string \fBsize_human\fP (const std::string &filename, bool verbose=true)"
.br
.RI "Calculates the size of a file\&. "
.ti -1c
.RI "std::string \fBsize_dir\fP (\fBmml::string\fP &dir, std::string include='', std::string exclude='', bool verbose=false, bool recursive=false, bool all=false, bool human_readable=false) noexcept"
.br
.RI "Calculates the size of a directory structure\&. "
.ti -1c
.RI "time_t \fBtime_mod\fP (const std::string &filename)"
.br
.RI "Returns the last modified time of a file in seconds\&. "
.in -1c
.SH "Function Documentation"
.PP 
.SS "void mml::file::add_twofiles (std::string filepath_input1, std::string filepath_input2, std::string filepath_output)"

.PP
Opens two textfiles and writes it in another\&. 
.PP
\fBParameters\fP
.RS 4
\fIfilepath_input1\fP First file name to be written into a new one 
.br
\fIfilepath_input2\fP First file name to be written into a new one 
.br
\fIfilepath_output\fP where the content is written to 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIruntime_error\fP : if input1 or input2 cannot be read 
.RE
.PP

.SS "bool mml::file::byteCopy (const std::string & src, const std::string & dest, std::size_t blockSize, bool progress = \fCfalse\fP)"

.PP
Copy a file\&. 
.PP
\fBParameters\fP
.RS 4
\fIsrc\fP Source File 
.br
\fIdest\fP Destination file 
.br
\fIblockSize\fP Size of the block to be copied at once 
.br
\fIprogress\fP Print out a progress bar 
.RE
.PP
\fBReturns\fP
.RS 4
bool 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIruntime_error\fP : if source file does not exist 
.RE
.PP
\fBAuthor\fP
.RS 4
Mike, Lucas 
.RE
.PP

.SS "int mml::file::copy (\fBmml::string\fP src, \fBmml::string\fP dst, std::string name_in = \fC''\fP, std::string name_ex = \fC''\fP, size_t blocksize = \fC\fB_100MB\fP\fP, bool verbose = \fCfalse\fP, bool verbose_debug = \fCfalse\fP, bool all = \fCfalse\fP, bool recursive = \fCfalse\fP, bool force = \fCfalse\fP, bool progress = \fCfalse\fP, bool falsewrite = \fCfalse\fP)"

.PP
Copy the content of the path to a new one\&. 
.PP
\fBParameters\fP
.RS 4
\fIsrc\fP Source Path 
.br
\fIdst\fP Destination path 
.br
\fIname_in\fP Copy only files including this string in depth = 1 
.br
\fIname_ex\fP Exclude all files and directories with this name 
.br
\fIblocksize\fP Blocksize to be copied at once 
.br
\fIverbose\fP Verbose output 
.br
\fIverbose_debug\fP Debugging output 
.br
\fIall\fP Copy also hidden files 
.br
\fIrecursive\fP Copy recursive 
.br
\fIprogress\fP Print out the progress while copying 
.br
\fIfalsewrite\fP Do not overwrite files in the destination 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successfull 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIlogic_error\fP : If a file is to be copied but dst is a directory 
.br
\fIlogic_error\fP : If destination exists as a file if a directory is copied 
.br
\fIruntime_error\fP : If user is not permitted to write into the destination 
.br
\fIruntime_error\fP : If last directory in destionation is not a directory 
.RE
.PP

.SS "bool mml::file::equal (std::string src, std::string dst)"

.PP
Compare two files by using the SHA256 algorithm\&. Only works for linux\&. 
.PP
\fBParameters\fP
.RS 4
\fIsrc\fP Source file 
.br
\fIdst\fP Destination file 
.RE
.PP
\fBReturns\fP
.RS 4
bool if sha256 is the same 
.RE
.PP

.SS "int32_t mml::file::filetype (std::string filepath)"

.PP
Determine the type of an object (directory, file, etc\&.) 
.PP
\fBParameters\fP
.RS 4
\fIfilepath\fP Path to the object 
.RE
.PP
\fBReturns\fP
.RS 4
Returns a number to identify the type of the object 
.RE
.PP
\fBNote\fP
.RS 4
The numbers have the following meaning:
.IP "\(bu" 2
1: DT_FIFO
.IP "\(bu" 2
2: Serial connected device, mouse, etc\&.
.IP "\(bu" 2
4: Directory
.IP "\(bu" 2
6: Device or partition
.IP "\(bu" 2
8: normal file
.IP "\(bu" 2
10: symbolic link
.IP "\(bu" 2
12: Socket 
.PP
.RE
.PP

.SS "std::string mml::file::humanread (std::size_t number)"

.PP
Convert number into human readable number\&. 
.PP
\fBParameters\fP
.RS 4
\fInumber\fP A number to be converted 
.RE
.PP
\fBReturns\fP
.RS 4
std::string 
.RE
.PP

.SS "std::size_t mml::file::num_lines (std::string path)"

.PP
Determine number of lines in a file\&. 
.PP
\fBParameters\fP
.RS 4
\fIstring\fP Path to the file 
.RE
.PP
\fBReturns\fP
.RS 4
size_t Number of lines 
.RE
.PP

.SS "int mml::file::Program_exist (std::string program)"

.PP
Checks if a program exists\&. 
.PP
\fBAuthor\fP
.RS 4
Mike/scratch/moser/gris_20150510_009/sir/Exp0 
.RE
.PP

.SS "void mml::file::remove (std::string file)"

.PP
\fBNote\fP
.RS 4
Delete a single file 
.RE
.PP
\fBParameters\fP
.RS 4
\fIstring\fP path to the file 
.RE
.PP
\fBAuthor\fP
.RS 4
Mike 
.RE
.PP

.SS "void mml::file::set_date_dir (\fBmml::string\fP src, \fBmml::string\fP dst, std::vector< std::string > ends = \fC{'NEF','tif','JPG','jpg','MP4','MOV','PNG','HEIC','JPEG','jpeg','pdf', 'PDF'}\fP, bool recursive = \fCfalse\fP, bool all = \fCfalse\fP, bool verbose = \fCfalse\fP)"

.PP
\fBNote\fP
.RS 4
Convert the date of files with specific endings in a directory 
.RE
.PP
\fBParameters\fP
.RS 4
\fIstring\fP Source path 
.br
\fIstring\fP Destination path 
.br
\fIends\fP Endings to be checked 
.br
\fIrecursive\fP Recursive check 
.br
\fIall\fP Also check hidden files 
.br
\fIverbose\fP Verbose output 
.RE
.PP
\fBNote\fP
.RS 4
This function is only defined for linux systems 
.RE
.PP

.SS "std::size_t mml::file::size (const std::string & filename)"

.PP
Calculates the size of a file\&. 
.PP
\fBParameters\fP
.RS 4
\fIstring\fP Path to the file 
.RE
.PP
\fBReturns\fP
.RS 4
Size of the file 
.RE
.PP
\fBAuthor\fP
.RS 4
Lucas 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIruntime_error\fP : if file does not exist 
.RE
.PP

.SS "std::string mml::file::size_dir (\fBmml::string\fP & dir, std::string include = \fC''\fP, std::string exclude = \fC''\fP, bool verbose = \fCfalse\fP, bool recursive = \fCfalse\fP, bool all = \fCfalse\fP, bool human_readable = \fCfalse\fP)\fC [noexcept]\fP"

.PP
Calculates the size of a directory structure\&. 
.PP
\fBParameters\fP
.RS 4
\fIdir\fP Path to the directory 
.br
\fIinclude\fP Include only count objects having this string in its name 
.br
\fIexclude\fP Exclude objects with this name from the count 
.br
\fIverbose\fP Verbose print out 
.br
\fIrecursive\fP Recursive check 
.br
\fIall\fP Also count hidden files 
.br
\fIhuman_readable\fP Print out in human readable form 
.RE
.PP
\fBReturns\fP
.RS 4
Returns the size of the directory 
.RE
.PP

.SS "std::string mml::file::size_human (const std::string & filename, bool verbose = \fCtrue\fP)"

.PP
Calculates the size of a file\&. 
.PP
\fBParameters\fP
.RS 4
\fIfilename\fP Path to the file 
.br
\fIverbose\fP Print out 
.RE
.PP
\fBReturns\fP
.RS 4
Returns the size of a file in a readable form as a string 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIruntime_error\fP : if file does not exist 
.RE
.PP

.SS "time_t mml::file::time_mod (const std::string & filename)"

.PP
Returns the last modified time of a file in seconds\&. 
.PP
\fBParameters\fP
.RS 4
\fIfilename\fP Path to the file 
.RE
.PP
\fBReturns\fP
.RS 4
Seconds since 1970 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for mml from the source code\&.

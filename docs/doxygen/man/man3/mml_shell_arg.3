.TH "mml::shell::arg" 3 "Tue May 21 2024" "mml" \" -*- nroff -*-
.ad l
.nh
.SH NAME
mml::shell::arg
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <shell\&.hpp>\fP
.PP
Inherits \fBmml::vector< mml::string >\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBarg\fP (int argc1, char **argv1, bool getarg=false, std::string except1='xxxxx', std::string except2='xxxxx', std::string except3='xxxxx', std::string except4='xxxxx', std::string except5='xxxxx', std::string except6='xxxxx', std::string except7='xxxxx')"
.br
.ti -1c
.RI "\fBarg\fP (char **argv1, int argc1)"
.br
.ti -1c
.RI "\fBarg\fP (\fBmml::string\fP a)"
.br
.ti -1c
.RI "\fBarg\fP (\fBmml::string\fP a, \fBmml::string\fP b)"
.br
.ti -1c
.RI "\fBarg\fP (\fBmml::string\fP a, \fBmml::string\fP b, \fBmml::string\fP c)"
.br
.ti -1c
.RI "\fBarg\fP (std::vector< std::string > vec_temp)"
.br
.ti -1c
.RI "\fBarg\fP ()"
.br
.ti -1c
.RI "\fBarg\fP (\fBarg\fP &vec_copy)"
.br
.ti -1c
.RI "\fBarg\fP & \fBoperator=\fP (const \fBarg\fP &vec_temp)"
.br
.ti -1c
.RI "\fBarg\fP & \fBoperator=\fP (const std::vector< std::string > &vec_temp)"
.br
.ti -1c
.RI "std::vector< \fBmml::string\fP > & \fBoperator()\fP (char **argv1, int argc1, bool getarg=false)"
.br
.ti -1c
.RI "std::vector< \fBmml::string\fP > & \fBoperator()\fP (int argc1, char **argv1, bool getarg=false)"
.br
.ti -1c
.RI "std::size_t \fBbeginArg\fP (const std::string &\fBstr\fP)"
.br
.ti -1c
.RI "void \fBerase\fP (std::size_t pos1, std::size_t pos2=0)"
.br
.ti -1c
.RI "bool \fBexist\fP (std::string search)"
.br
.ti -1c
.RI "bool \fBexist\fP (std::string search1, std::string search2)"
.br
.ti -1c
.RI "bool \fBexist\fP (std::string search1, std::string search2, std::string search3)"
.br
.ti -1c
.RI "bool \fBexist\fP (std::string search1, std::string search2, std::string search3, std::string search4)"
.br
.ti -1c
.RI "bool \fBexist\fP (std::size_t pos, std::string name)"
.br
.ti -1c
.RI "bool \fBfindArg\fP (const std::string &\fBstr\fP)"
.br
.ti -1c
.RI "bool \fBfindArg\fP (const std::string &str1, const std::string &str2)"
.br
.ti -1c
.RI "bool \fBfindArg\fP (const std::string &str1, const std::string &str2, const std::string &str3)"
.br
.ti -1c
.RI "bool \fBfindArg\fP (const std::string &str1, const std::string &str2, const std::string &str3, const std::string &str4)"
.br
.ti -1c
.RI "void \fBgetArg\fP (std::string except1='xxxxx', std::string except2='xxxxx', std::string except3='xxxxx', std::string except4='xxxxx', std::string except5='xxxxx', std::string except6='xxxxx', std::string excep7='xxxxx')"
.br
.ti -1c
.RI "void \fBinit\fP (std::string except1='xxxxx', std::string except2='xxxxx', std::string except3='xxxxx', std::string except4='xxxxx', std::string except5='xxxxx', std::string except6='xxxxx', std::string except7='xxxxx')"
.br
.ti -1c
.RI "bool \fBnotArg\fP (const std::string &str1)"
.br
.ti -1c
.RI "bool \fBnotArg\fP (const std::string &str1, const std::string &str2)"
.br
.ti -1c
.RI "bool \fBnotArg\fP (const std::string &str1, const std::string &str2, const std::string &str3)"
.br
.ti -1c
.RI "bool \fBnotArg\fP (const std::string &str1, const std::string &str2, const std::string &str3, const std::string &str4)"
.br
.ti -1c
.RI "std::size_t \fBpositionArg\fP (const std::string &\fBstr\fP)"
.br
.ti -1c
.RI "std::size_t \fBpositionArg\fP (const std::string &\fBstr\fP, const std::string &str2)"
.br
.ti -1c
.RI "std::vector< \fBmml::string\fP > \fBreplace\fP (char sign_old, char sign_new)"
.br
.ti -1c
.RI "std::vector< \fBmml::string\fP > \fBreplace\fP (std::string str_old, std::string str_new)"
.br
.ti -1c
.RI "void \fBsort\fP ()"
.br
.ti -1c
.RI "std::vector< \fBmml::string\fP > \fBstr\fP ()"
.br
.ti -1c
.RI "std::vector< std::string > \fBstr_change\fP ()"
.br
.ti -1c
.RI "std::vector< \fBmml::string\fP > \fBtostr\fP (std::vector< std::string > temp)"
.br
.ti -1c
.RI "\fB~arg\fP ()"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "int \fBargc\fP = 0"
.br
.ti -1c
.RI "char ** \fBargv\fP = {}"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "mml::shell::arg::arg (int argc1, char ** argv1, bool getarg = \fCfalse\fP, std::string except1 = \fC'xxxxx'\fP, std::string except2 = \fC'xxxxx'\fP, std::string except3 = \fC'xxxxx'\fP, std::string except4 = \fC'xxxxx'\fP, std::string except5 = \fC'xxxxx'\fP, std::string except6 = \fC'xxxxx'\fP, std::string except7 = \fC'xxxxx'\fP)\fC [inline]\fP"

.SS "mml::shell::arg::arg (char ** argv1, int argc1)\fC [inline]\fP"

.SS "mml::shell::arg::arg (\fBmml::string\fP a)\fC [inline]\fP"

.SS "mml::shell::arg::arg (\fBmml::string\fP a, \fBmml::string\fP b)\fC [inline]\fP"

.SS "mml::shell::arg::arg (\fBmml::string\fP a, \fBmml::string\fP b, \fBmml::string\fP c)\fC [inline]\fP"

.SS "mml::shell::arg::arg (std::vector< std::string > vec_temp)\fC [inline]\fP"

.SS "mml::shell::arg::arg ()\fC [inline]\fP"

.SS "mml::shell::arg::arg (\fBarg\fP & vec_copy)\fC [inline]\fP"

.SS "mml::shell::arg::~arg ()\fC [inline]\fP"

.SH "Member Function Documentation"
.PP 
.SS "std::size_t mml::shell::arg::beginArg (const std::string & str)"

.PP
\fBNote\fP
.RS 4
Positionsbestimmung, sobald ein String beginnend am Anfang mit einem Wert übereinstimmt
.RE
.PP
\fBReturns\fP
.RS 4
Position 
.RE
.PP
\fBAuthor\fP
.RS 4
Mike
.PP
Mike Moser
.RE
.PP
Quelldatei args\&.cpp Enthält verschiedene Funktionen für die Klasse arg 
.SS "void mml::shell::arg::erase (std::size_t pos1, std::size_t pos2 = \fC0\fP)"

.PP
\fBNote\fP
.RS 4
Ausgabe aller Elemente im Vektor
.RE
.PP
\fBAuthor\fP
.RS 4
Mike 
.RE
.PP
\fBNote\fP
.RS 4
Ein Element oder mehrere entfernen
.RE
.PP
\fBAuthor\fP
.RS 4
Mike 
.RE
.PP

.SS "bool mml::shell::arg::exist (std::size_t pos, std::string name)"

.PP
\fBNote\fP
.RS 4
Nachschauen, ob ein String in einem bestimmten String vorkommt
.RE
.PP
\fBReturns\fP
.RS 4
true oder false 
.RE
.PP
\fBAuthor\fP
.RS 4
Mike 
.RE
.PP

.SS "bool mml::shell::arg::exist (std::string search)"

.PP
\fBNote\fP
.RS 4
nachschauen ob ein String im Vektor vec vorkommt
.RE
.PP
\fBReturns\fP
.RS 4
true oder false 
.RE
.PP
\fBAuthor\fP
.RS 4
Mike 
.RE
.PP

.SS "bool mml::shell::arg::exist (std::string search1, std::string search2)"

.SS "bool mml::shell::arg::exist (std::string search1, std::string search2, std::string search3)"

.SS "bool mml::shell::arg::exist (std::string search1, std::string search2, std::string search3, std::string search4)"

.SS "bool mml::shell::arg::findArg (const std::string & str)"

.PP
\fBNote\fP
.RS 4
Finden von Argumenten
.RE
.PP
\fBAuthor\fP
.RS 4
Mike 
.RE
.PP

.SS "bool mml::shell::arg::findArg (const std::string & str1, const std::string & str2)"

.SS "bool mml::shell::arg::findArg (const std::string & str1, const std::string & str2, const std::string & str3)"

.SS "bool mml::shell::arg::findArg (const std::string & str1, const std::string & str2, const std::string & str3, const std::string & str4)"

.SS "void mml::shell::arg::getArg (std::string except1 = \fC'xxxxx'\fP, std::string except2 = \fC'xxxxx'\fP, std::string except3 = \fC'xxxxx'\fP, std::string except4 = \fC'xxxxx'\fP, std::string except5 = \fC'xxxxx'\fP, std::string except6 = \fC'xxxxx'\fP, std::string excep7 = \fC'xxxxx'\fP)"
Argumente bei -xyz bestimmen
.PP
\fBAuthor\fP
.RS 4
Mike 
.RE
.PP

.SS "void mml::shell::arg::init (std::string except1 = \fC'xxxxx'\fP, std::string except2 = \fC'xxxxx'\fP, std::string except3 = \fC'xxxxx'\fP, std::string except4 = \fC'xxxxx'\fP, std::string except5 = \fC'xxxxx'\fP, std::string except6 = \fC'xxxxx'\fP, std::string except7 = \fC'xxxxx'\fP)"

.PP
\fBNote\fP
.RS 4
Initialisierung bei Start zum Ausführen von Standardoperationen
.RE
.PP
\fBAuthor\fP
.RS 4
Mike 
.RE
.PP

.SS "bool mml::shell::arg::notArg (const std::string & str1)"

.PP
\fBNote\fP
.RS 4
Finden von nicht vorhandenen Argumenten
.RE
.PP
\fBReturns\fP
.RS 4
true, wenn nicht gefunden 
.RE
.PP
\fBAuthor\fP
.RS 4
Mike 
.RE
.PP

.SS "bool mml::shell::arg::notArg (const std::string & str1, const std::string & str2)"

.SS "bool mml::shell::arg::notArg (const std::string & str1, const std::string & str2, const std::string & str3)"

.SS "bool mml::shell::arg::notArg (const std::string & str1, const std::string & str2, const std::string & str3, const std::string & str4)"

.SS "std::vector< \fBmml::string\fP > & mml::shell::arg::operator() (char ** argv1, int argc1, bool getarg = \fCfalse\fP)"

.PP
\fBNote\fP
.RS 4
Initialisierung mit direkter Übergabe der argv und argc Werte
.RE
.PP
\fBAuthor\fP
.RS 4
Mike 
.RE
.PP

.SS "std::vector< \fBmml::string\fP > & mml::shell::arg::operator() (int argc1, char ** argv1, bool getarg = \fCfalse\fP)"

.SS "\fBarg\fP& mml::shell::arg::operator= (const \fBarg\fP & vec_temp)\fC [inline]\fP"

.SS "\fBarg\fP& mml::shell::arg::operator= (const std::vector< std::string > & vec_temp)\fC [inline]\fP"

.SS "std::size_t mml::shell::arg::positionArg (const std::string & str)"

.PP
\fBNote\fP
.RS 4
Positionsbestimmungen, wo ein gesuchter String steht
.RE
.PP
\fBReturns\fP
.RS 4
Positionnamespace mml{ 
.RE
.PP
\fBAuthor\fP
.RS 4
Mike 
.RE
.PP

.SS "std::size_t mml::shell::arg::positionArg (const std::string & str, const std::string & str2)"

.SS "std::vector< \fBmml::string\fP > mml::shell::arg::replace (char sign_old, char sign_new)"

.PP
\fBNote\fP
.RS 4
Ersetzen eines chars oder eines Strings in einem Vektor
.RE
.PP
\fBReturns\fP
.RS 4
Vektor mit den ersetzten Werten 
.RE
.PP
\fBAuthor\fP
.RS 4
Mike 
.RE
.PP

.SS "std::vector< \fBmml::string\fP > mml::shell::arg::replace (std::string str_old, std::string str_new)"

.SS "void mml::shell::arg::sort ()"

.PP
\fBNote\fP
.RS 4
Nachträgliche Initialisierung der Werte von übergebenen Werten
.RE
.PP
\fBAuthor\fP
.RS 4
Mike 
.RE
.PP
\fBNote\fP
.RS 4
Sortieren der Werte
.RE
.PP
\fBAuthor\fP
.RS 4
Mike 
.RE
.PP

.SS "std::vector< \fBmml::string\fP > mml::shell::arg::str ()"

.PP
\fBNote\fP
.RS 4
Umwandlungen der Werte in einen Standard String Vektor
.RE
.PP
\fBReturns\fP
.RS 4
String Vektor 
.RE
.PP
\fBAuthor\fP
.RS 4
Mike 
.RE
.PP

.SS "std::vector< std::string > mml::shell::arg::str_change ()"

.SS "std::vector< \fBmml::string\fP > mml::shell::arg::tostr (std::vector< std::string > temp)"

.SH "Member Data Documentation"
.PP 
.SS "int mml::shell::arg::argc = 0\fC [protected]\fP"

.SS "char** mml::shell::arg::argv = {}\fC [protected]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for mml from the source code\&.

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespacemml" kind="namespace" language="C++">
    <compoundname>mml</compoundname>
    <innerclass refid="classmml_1_1string" prot="public">mml::string</innerclass>
    <innernamespace refid="namespacemml_1_1thread">mml::thread</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="standards_8hpp_1ac91ad57c28ab9cecb7e82ef220f148c8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename templ</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double mml::atob</definition>
        <argsstring>(const templ &amp;t) noexcept</argsstring>
        <name>atob</name>
        <param>
          <type>const templ &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Converts value to bool. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/moser/codes/mml/include/mml/standards.hpp" line="455" column="19" bodyfile="/home/moser/codes/mml/include/mml/standards.hpp" bodystart="455" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="standards_8hpp_1a63d35e02eeb9557dfc874c351694a481" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double mml::atof</definition>
        <argsstring>(const T &amp;t) noexcept</argsstring>
        <name>atof</name>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Converts value to bool. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/moser/codes/mml/include/mml/standards.hpp" line="469" column="19" bodyfile="/home/moser/codes/mml/include/mml/standards.hpp" bodystart="469" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="standards_8hpp_1ac6c1c70d32321714808ae64e33404d71" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int mml::atoi</definition>
        <argsstring>(const T &amp;t) noexcept</argsstring>
        <name>atoi</name>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Converts value to int. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/moser/codes/mml/include/mml/standards.hpp" line="483" column="16" bodyfile="/home/moser/codes/mml/include/mml/standards.hpp" bodystart="483" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="standards_8hpp_1af4da79098c1caf9501e3f4ad9313a573" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mml::check_root</definition>
        <argsstring>(std::string programme=&quot;&quot;)</argsstring>
        <name>check_root</name>
        <param>
          <type>std::string</type>
          <declname>programme</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Check if program executed as root. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>programme</parametername>
</parameternamelist>
<parameterdescription>
<para>Programme name </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>: if user is not root </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/moser/codes/mml/include/mml/standards.hpp" line="497" column="6" declfile="/home/moser/codes/mml/include/mml/standards.hpp" declline="497" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="standards_8hpp_1ae91f369e368b0941ddcb8b5be38c36f9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename templ</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mml::cout</definition>
        <argsstring>(std::vector&lt; templ &gt; const &amp;vec) noexcept</argsstring>
        <name>cout</name>
        <param>
          <type>std::vector&lt; templ &gt; const &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prints the values of a vector</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to be printed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/moser/codes/mml/include/mml/standards.hpp" line="504" column="18" bodyfile="/home/moser/codes/mml/include/mml/standards.hpp" bodystart="504" bodyend="507"/>
      </memberdef>
      <memberdef kind="function" id="standards_8hpp_1a4e23041702a789444e71665de8e19b91" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t mml::date</definition>
        <argsstring>(int info, time_t time1=-1) noexcept</argsstring>
        <name>date</name>
        <param>
          <type>int</type>
          <declname>info</declname>
        </param>
        <param>
          <type>time_t</type>
          <declname>time1</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Returns the wished info from the time (like date etc.) Options are: </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>0: Seconds</para>
</listitem><listitem><para>1: Minutes</para>
</listitem><listitem><para>2: Hours</para>
</listitem><listitem><para>3: Day</para>
</listitem><listitem><para>4: Month</para>
</listitem><listitem><para>5: Year</para>
</listitem><listitem><para>6: Summertime</para>
</listitem><listitem><para>7: Weekday (Days since sunday)</para>
</listitem><listitem><para>8: Yearday (Days since New Year)</para>
</listitem><listitem><para>9: kw</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Determines what information is printed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time1</parametername>
</parameternamelist>
<parameterdescription>
<para>Time for which the information is printed. -1 =&gt; Actual time now. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>unsigned integer </para>
</simplesect>
<simplesect kind="author"><para>Mike </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/moser/codes/mml/include/mml/standards.hpp" line="528" column="10" declfile="/home/moser/codes/mml/include/mml/standards.hpp" declline="528" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="standards_8hpp_1ae53fc572ec720a1c9aebc3ba5458ff5d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mml::date</definition>
        <argsstring>(time_t time1=-1, mml::string value=&quot;Date+Time&quot;, std::string separator1=&quot;:&quot;, std::string separator2=&quot;.&quot;) noexcept</argsstring>
        <name>date</name>
        <param>
          <type>time_t</type>
          <declname>time1</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type><ref refid="classmml_1_1string" kindref="compound">mml::string</ref></type>
          <declname>value</declname>
          <defval>&quot;Date+Time&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>separator1</declname>
          <defval>&quot;:&quot;</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>separator2</declname>
          <defval>&quot;.&quot;</defval>
        </param>
        <briefdescription>
<para>Returns the date and/or time as a std::string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time1</parametername>
</parameternamelist>
<parameterdescription>
<para>Time for which the information is printed. -1 =&gt; Actual time now </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Determines what information is printed.<itemizedlist>
<listitem><para>&quot;Date&quot; : DD.MM.YYYY (based on separator1)</para>
</listitem><listitem><para>&quot;Time&quot; : HH:MM:SS (based on separator1)</para>
</listitem><listitem><para>&quot;Date+Time&quot; : Complete date in format DD.MM.YYYY HH:MM:SS.</para>
</listitem><listitem><para>&quot;Date1+Time&quot; : Compete date in format YYYY.MM.DD HH:MM:SS. </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>separator1</parametername>
</parameternamelist>
<parameterdescription>
<para>First separation sign for the date </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>separator2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second separation sign for the time</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string </para>
</simplesect>
<simplesect kind="author"><para>Mike </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/moser/codes/mml/include/mml/standards.hpp" line="544" column="13" declfile="/home/moser/codes/mml/include/mml/standards.hpp" declline="544" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="standards_8hpp_1a62caac25aebf89f67e3c8438fbbb67fa" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mml::isnum</definition>
        <argsstring>(char c) noexcept</argsstring>
        <name>isnum</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Checks if a character is a number. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Character to be checked </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/moser/codes/mml/include/mml/standards.hpp" line="551" column="6" declfile="/home/moser/codes/mml/include/mml/standards.hpp" declline="551" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="standards_8hpp_1ad1fcba2487a959000bac06da539b792c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mml::range</definition>
        <argsstring>(std::size_t number) noexcept</argsstring>
        <name>range</name>
        <param>
          <type>std::size_t</type>
          <declname>number</declname>
        </param>
        <briefdescription>
<para>Checks if a number has reached the maximum value (std::string::npos) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>number</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to be checked </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true : smaller than the maximum value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/moser/codes/mml/include/mml/standards.hpp" line="557" column="6" declfile="/home/moser/codes/mml/include/mml/standards.hpp" declline="557" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="standards_8hpp_1a8648c76abb82d5eb1745f91e4201b247" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mml::range</definition>
        <argsstring>(std::size_t number1, std::size_t number2) noexcept</argsstring>
        <name>range</name>
        <param>
          <type>std::size_t</type>
          <declname>number1</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>number2</declname>
        </param>
        <briefdescription>
<para>Checks if one of two numbers has reached the maximum value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>number1</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to be checked </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>number2</parametername>
</parameternamelist>
<parameterdescription>
<para>Number to be checked </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true : at least one number is smaller than the max. value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/moser/codes/mml/include/mml/standards.hpp" line="565" column="6" declfile="/home/moser/codes/mml/include/mml/standards.hpp" declline="565" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="standards_8hpp_1a5aa66f758c7e5b3bde73a72428c60db7" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>double</type>
        <definition>double mml::round</definition>
        <argsstring>(double number, uint16_t digits) noexcept</argsstring>
        <name>round</name>
        <param>
          <type>double</type>
          <declname>number</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>digits</declname>
        </param>
        <briefdescription>
<para>round a number </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>number</parametername>
</parameternamelist>
<parameterdescription>
<para>Number which is rounded </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>digits</parametername>
</parameternamelist>
<parameterdescription>
<para>To which digit it is rounded </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>round number </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/moser/codes/mml/include/mml/standards.hpp" line="573" column="8" declfile="/home/moser/codes/mml/include/mml/standards.hpp" declline="573" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="standards_8hpp_1a76d259a94d9ed50a9d33081caed25131" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classmml_1_1string" kindref="compound">mml::string</ref></type>
        <definition>mml::string mml::to_string</definition>
        <argsstring>(const T &amp;t) noexcept</argsstring>
        <name>to_string</name>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Convert value to <ref refid="classmml_1_1string" kindref="compound">mml::string</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be changed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classmml_1_1string" kindref="compound">mml::string</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/moser/codes/mml/include/mml/standards.hpp" line="580" column="24" bodyfile="/home/moser/codes/mml/include/mml/standards.hpp" bodystart="580" bodyend="584"/>
      </memberdef>
      <memberdef kind="function" id="standards_8hpp_1a3edf33524b8d67442b6b8fd75b66afc4" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t mml::const_string_hash</definition>
        <argsstring>(const char *string) noexcept</argsstring>
        <name>const_string_hash</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
<para>Forms a hash value of a string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>String to be converted </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Hash value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/moser/codes/mml/include/mml/standards.hpp" line="593" column="20" bodyfile="/home/moser/codes/mml/include/mml/standards.hpp" bodystart="593" bodyend="621"/>
      </memberdef>
      <memberdef kind="function" id="standards_8hpp_1a09b5d2051c67d0ee351b09f87c30126d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mml::declare_month</definition>
        <argsstring>(int month_nr) noexcept</argsstring>
        <name>declare_month</name>
        <param>
          <type>int</type>
          <declname>month_nr</declname>
        </param>
        <briefdescription>
<para>Convert month number to month string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>month_nr</parametername>
</parameternamelist>
<parameterdescription>
<para>Month as a number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Name of the month as a string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/moser/codes/mml/include/mml/standards.hpp" line="628" column="13" declfile="/home/moser/codes/mml/include/mml/standards.hpp" declline="628" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="standards_8hpp_1aed237a2c04babbcae30d180ab047666f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename templ</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void mml::erase</definition>
        <argsstring>(std::vector&lt; templ &gt; &amp;data) noexcept</argsstring>
        <name>erase</name>
        <param>
          <type>std::vector&lt; templ &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Empty a vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the vector to be erased </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/moser/codes/mml/include/mml/standards.hpp" line="634" column="18" bodyfile="/home/moser/codes/mml/include/mml/standards.hpp" bodystart="634" bodyend="634"/>
      </memberdef>
      <memberdef kind="function" id="standards_8hpp_1a16e784b078d6a774ffaf01ef4d4c7647" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename templ</type>
          </param>
        </templateparamlist>
        <type>templ</type>
        <definition>templ mml::get_random</definition>
        <argsstring>(templ min=0, templ max=100) noexcept</argsstring>
        <name>get_random</name>
        <param>
          <type>templ</type>
          <declname>min</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>templ</type>
          <declname>max</declname>
          <defval>100</defval>
        </param>
        <briefdescription>
<para>Create a random number in a defined range. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>min</parametername>
</parameternamelist>
<parameterdescription>
<para>Lowest Number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>Highes Number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>generated random number </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/moser/codes/mml/include/mml/standards.hpp" line="642" column="19" declfile="/home/moser/codes/mml/include/mml/standards.hpp" declline="642" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="standards_8hpp_1ae9a2f37b5fb1e8e463509077bbe11212" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename templ</type>
          </param>
        </templateparamlist>
        <type>templ</type>
        <definition>templ mml::smallest_num</definition>
        <argsstring>(std::vector&lt; templ &gt; values, std::size_t pos=0)</argsstring>
        <name>smallest_num</name>
        <param>
          <type>std::vector&lt; templ &gt;</type>
          <declname>values</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>pos</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return the smallest number. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>values</parametername>
</parameternamelist>
<parameterdescription>
<para>Values as a vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>Start position </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>smallest number </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>logic_error</parametername>
</parameternamelist>
<parameterdescription>
<para>: if type is non-arithmetic </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/moser/codes/mml/include/mml/standards.hpp" line="651" column="19" declfile="/home/moser/codes/mml/include/mml/standards.hpp" declline="651" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="standards_8hpp_1a171afac262e291910b6f222216263b35" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string mml::random_str</definition>
        <argsstring>(size_t letters=10, std::string start=&quot;&quot;) noexcept</argsstring>
        <name>random_str</name>
        <param>
          <type>size_t</type>
          <declname>letters</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>std::string</type>
          <declname>start</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Create a random, lower-case string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>letters</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of letters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>Add the generated characters to this string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>generated string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/moser/codes/mml/include/mml/standards.hpp" line="659" column="13" declfile="/home/moser/codes/mml/include/mml/standards.hpp" declline="659" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="standards_8hpp_1aa309b7ac991a2e8bb06209b9bb7b44fb" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t mml::digits</definition>
        <argsstring>(double number) noexcept</argsstring>
        <name>digits</name>
        <param>
          <type>double</type>
          <declname>number</declname>
        </param>
        <briefdescription>
<para>Determine number of digits of a double number. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>number</parametername>
</parameternamelist>
<parameterdescription>
<para>the number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of digits </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/moser/codes/mml/include/mml/standards.hpp" line="666" column="13" declfile="/home/moser/codes/mml/include/mml/standards.hpp" declline="666" declcolumn="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/moser/codes/mml/include/mml/standards.hpp" line="23" column="1"/>
  </compounddef>
</doxygen>
